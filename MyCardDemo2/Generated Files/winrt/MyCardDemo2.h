// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_MyCardDemo2_H
#define WINRT_MyCardDemo2_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.190506.1"), "Mismatched C++/WinRT headers.");
#include "winrt/impl/Windows.Data.Json.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/Windows.UI.Xaml.Data.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/MyCardDemo2.2.h"
namespace winrt::impl
{
    template <typename D> MyCardDemo2::CardViewModel consume_MyCardDemo2_IAddCardContentPage<D>::AddCardTitleVM() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::IAddCardContentPage)->get_AddCardTitleVM(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_IAddCardContentPage<D>::AddCardTitleVM(MyCardDemo2::CardViewModel const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::IAddCardContentPage)->put_AddCardTitleVM(*(void**)(&value)));
    }
    template <typename D> hstring consume_MyCardDemo2_ICardListViewModel<D>::Stringify() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardListViewModel)->get_Stringify(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_MyCardDemo2_ICardListViewModel<D>::CardLists() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardListViewModel)->get_CardLists(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_ICardListViewModel<D>::CardLists(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardListViewModel)->put_CardLists(*(void**)(&value)));
    }
    template <typename D> hstring consume_MyCardDemo2_ICardModel<D>::ToastId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardModel)->get_ToastId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_ICardModel<D>::ToastId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardModel)->put_ToastId(*(void**)(&value)));
    }
    template <typename D> hstring consume_MyCardDemo2_ICardModel<D>::ContentTitle() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardModel)->get_ContentTitle(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_ICardModel<D>::ContentTitle(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardModel)->put_ContentTitle(*(void**)(&value)));
    }
    template <typename D> hstring consume_MyCardDemo2_ICardModel<D>::ContentDetail() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardModel)->get_ContentDetail(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_ICardModel<D>::ContentDetail(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardModel)->put_ContentDetail(*(void**)(&value)));
    }
    template <typename D> hstring consume_MyCardDemo2_ICardModel<D>::AlarmTime() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardModel)->get_AlarmTime(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_ICardModel<D>::AlarmTime(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardModel)->put_AlarmTime(*(void**)(&value)));
    }
    template <typename D> hstring consume_MyCardDemo2_ICardModel<D>::StatusColor() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardModel)->get_StatusColor(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_ICardModel<D>::StatusColor(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardModel)->put_StatusColor(*(void**)(&value)));
    }
    template <typename D> Windows::Data::Json::JsonObject consume_MyCardDemo2_ICardModel<D>::ToJsonObject() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardModel)->get_ToJsonObject(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_MyCardDemo2_ICardViewModel<D>::CardId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardViewModel)->get_CardId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_ICardViewModel<D>::CardId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardViewModel)->put_CardId(*(void**)(&value)));
    }
    template <typename D> hstring consume_MyCardDemo2_ICardViewModel<D>::HeaderTitle() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardViewModel)->get_HeaderTitle(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_ICardViewModel<D>::HeaderTitle(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardViewModel)->put_HeaderTitle(*(void**)(&value)));
    }
    template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> consume_MyCardDemo2_ICardViewModel<D>::Contents() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardViewModel)->get_Contents(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_ICardViewModel<D>::Contents(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardViewModel)->put_Contents(*(void**)(&value)));
    }
    template <typename D> hstring consume_MyCardDemo2_ICardViewModel<D>::Stringify() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardViewModel)->get_Stringify(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Data::Json::JsonObject consume_MyCardDemo2_ICardViewModel<D>::ToJsonObject() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ICardViewModel)->get_ToJsonObject(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> MyCardDemo2::CardListViewModel consume_MyCardDemo2_IMainPage<D>::CardListVM() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::IMainPage)->get_CardListVM(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_IMainPage<D>::CardListVM(MyCardDemo2::CardListViewModel const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::IMainPage)->put_CardListVM(*(void**)(&value)));
    }
    template <typename D> MyCardDemo2::CardViewModel consume_MyCardDemo2_ISingleCardUserControl<D>::CardTitleVM() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(MyCardDemo2::ISingleCardUserControl)->get_CardTitleVM(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_MyCardDemo2_ISingleCardUserControl<D>::CardTitleVM(MyCardDemo2::CardViewModel const& value) const
    {
        check_hresult(WINRT_SHIM(MyCardDemo2::ISingleCardUserControl)->put_CardTitleVM(*(void**)(&value)));
    }
    template <typename D> winrt::event_token consume_MyCardDemo2_ISingleCardUserControl<D>::MyDeleteEventHandler(Windows::Foundation::EventHandler<MyCardDemo2::CardViewModel> const& handler) const
    {
        winrt::event_token token;
        check_hresult(WINRT_SHIM(MyCardDemo2::ISingleCardUserControl)->add_MyDeleteEventHandler(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_MyCardDemo2_ISingleCardUserControl<D>::MyDeleteEventHandler_revoker consume_MyCardDemo2_ISingleCardUserControl<D>::MyDeleteEventHandler(auto_revoke_t, Windows::Foundation::EventHandler<MyCardDemo2::CardViewModel> const& handler) const
    {
        return impl::make_event_revoker<D, MyDeleteEventHandler_revoker>(this, MyDeleteEventHandler(handler));
    }
    template <typename D> void consume_MyCardDemo2_ISingleCardUserControl<D>::MyDeleteEventHandler(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_SHIM(MyCardDemo2::ISingleCardUserControl)->remove_MyDeleteEventHandler(impl::bind_in(token)));
    }
    template <typename D> winrt::event_token consume_MyCardDemo2_ISingleCardUserControl<D>::ListViewChangeItemEventHandler(Windows::Foundation::EventHandler<MyCardDemo2::CardModel> const& handler) const
    {
        winrt::event_token token;
        check_hresult(WINRT_SHIM(MyCardDemo2::ISingleCardUserControl)->add_ListViewChangeItemEventHandler(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_MyCardDemo2_ISingleCardUserControl<D>::ListViewChangeItemEventHandler_revoker consume_MyCardDemo2_ISingleCardUserControl<D>::ListViewChangeItemEventHandler(auto_revoke_t, Windows::Foundation::EventHandler<MyCardDemo2::CardModel> const& handler) const
    {
        return impl::make_event_revoker<D, ListViewChangeItemEventHandler_revoker>(this, ListViewChangeItemEventHandler(handler));
    }
    template <typename D> void consume_MyCardDemo2_ISingleCardUserControl<D>::ListViewChangeItemEventHandler(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_SHIM(MyCardDemo2::ISingleCardUserControl)->remove_ListViewChangeItemEventHandler(impl::bind_in(token)));
    }
    template <typename D> winrt::event_token consume_MyCardDemo2_ISingleCardUserControl<D>::ListViewAddItemEventHandler(Windows::Foundation::EventHandler<MyCardDemo2::CardViewModel> const& handler) const
    {
        winrt::event_token token;
        check_hresult(WINRT_SHIM(MyCardDemo2::ISingleCardUserControl)->add_ListViewAddItemEventHandler(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_MyCardDemo2_ISingleCardUserControl<D>::ListViewAddItemEventHandler_revoker consume_MyCardDemo2_ISingleCardUserControl<D>::ListViewAddItemEventHandler(auto_revoke_t, Windows::Foundation::EventHandler<MyCardDemo2::CardViewModel> const& handler) const
    {
        return impl::make_event_revoker<D, ListViewAddItemEventHandler_revoker>(this, ListViewAddItemEventHandler(handler));
    }
    template <typename D> void consume_MyCardDemo2_ISingleCardUserControl<D>::ListViewAddItemEventHandler(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_SHIM(MyCardDemo2::ISingleCardUserControl)->remove_ListViewAddItemEventHandler(impl::bind_in(token)));
    }
    template <typename D>
    struct produce<D, MyCardDemo2::IAddCardContentPage> : produce_base<D, MyCardDemo2::IAddCardContentPage>
    {
        int32_t WINRT_CALL get_AddCardTitleVM(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<MyCardDemo2::CardViewModel>(this->shim().AddCardTitleVM());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_AddCardTitleVM(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddCardTitleVM(*reinterpret_cast<MyCardDemo2::CardViewModel const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, MyCardDemo2::ICardListViewModel> : produce_base<D, MyCardDemo2::ICardListViewModel>
    {
        int32_t WINRT_CALL get_Stringify(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Stringify());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_CardLists(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().CardLists());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_CardLists(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CardLists(*reinterpret_cast<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, MyCardDemo2::ICardModel> : produce_base<D, MyCardDemo2::ICardModel>
    {
        int32_t WINRT_CALL get_ToastId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ToastId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ToastId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ToastId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ContentTitle(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ContentTitle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ContentTitle(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentTitle(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ContentDetail(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ContentDetail());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ContentDetail(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentDetail(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_AlarmTime(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AlarmTime());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_AlarmTime(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlarmTime(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_StatusColor(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().StatusColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_StatusColor(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StatusColor(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ToJsonObject(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Data::Json::JsonObject>(this->shim().ToJsonObject());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, MyCardDemo2::ICardViewModel> : produce_base<D, MyCardDemo2::ICardViewModel>
    {
        int32_t WINRT_CALL get_CardId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CardId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_CardId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CardId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HeaderTitle(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().HeaderTitle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HeaderTitle(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeaderTitle(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Contents(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable>>(this->shim().Contents());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Contents(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Contents(*reinterpret_cast<Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Stringify(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Stringify());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ToJsonObject(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Data::Json::JsonObject>(this->shim().ToJsonObject());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, MyCardDemo2::IMainPage> : produce_base<D, MyCardDemo2::IMainPage>
    {
        int32_t WINRT_CALL get_CardListVM(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<MyCardDemo2::CardListViewModel>(this->shim().CardListVM());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_CardListVM(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CardListVM(*reinterpret_cast<MyCardDemo2::CardListViewModel const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, MyCardDemo2::IMyConverter> : produce_base<D, MyCardDemo2::IMyConverter>
    {
    };
    template <typename D>
    struct produce<D, MyCardDemo2::ISingleCardUserControl> : produce_base<D, MyCardDemo2::ISingleCardUserControl>
    {
        int32_t WINRT_CALL get_CardTitleVM(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<MyCardDemo2::CardViewModel>(this->shim().CardTitleVM());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_CardTitleVM(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CardTitleVM(*reinterpret_cast<MyCardDemo2::CardViewModel const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL add_MyDeleteEventHandler(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().MyDeleteEventHandler(*reinterpret_cast<Windows::Foundation::EventHandler<MyCardDemo2::CardViewModel> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL remove_MyDeleteEventHandler(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MyDeleteEventHandler(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t WINRT_CALL add_ListViewChangeItemEventHandler(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ListViewChangeItemEventHandler(*reinterpret_cast<Windows::Foundation::EventHandler<MyCardDemo2::CardModel> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL remove_ListViewChangeItemEventHandler(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ListViewChangeItemEventHandler(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t WINRT_CALL add_ListViewAddItemEventHandler(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ListViewAddItemEventHandler(*reinterpret_cast<Windows::Foundation::EventHandler<MyCardDemo2::CardViewModel> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL remove_ListViewAddItemEventHandler(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ListViewAddItemEventHandler(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
}
namespace winrt::MyCardDemo2
{
}
namespace std
{
    template<> struct hash<winrt::MyCardDemo2::IAddCardContentPage> : winrt::impl::hash_base<winrt::MyCardDemo2::IAddCardContentPage> {};
    template<> struct hash<winrt::MyCardDemo2::ICardListViewModel> : winrt::impl::hash_base<winrt::MyCardDemo2::ICardListViewModel> {};
    template<> struct hash<winrt::MyCardDemo2::ICardModel> : winrt::impl::hash_base<winrt::MyCardDemo2::ICardModel> {};
    template<> struct hash<winrt::MyCardDemo2::ICardViewModel> : winrt::impl::hash_base<winrt::MyCardDemo2::ICardViewModel> {};
    template<> struct hash<winrt::MyCardDemo2::IMainPage> : winrt::impl::hash_base<winrt::MyCardDemo2::IMainPage> {};
    template<> struct hash<winrt::MyCardDemo2::IMyConverter> : winrt::impl::hash_base<winrt::MyCardDemo2::IMyConverter> {};
    template<> struct hash<winrt::MyCardDemo2::ISingleCardUserControl> : winrt::impl::hash_base<winrt::MyCardDemo2::ISingleCardUserControl> {};
    template<> struct hash<winrt::MyCardDemo2::AddCardContentPage> : winrt::impl::hash_base<winrt::MyCardDemo2::AddCardContentPage> {};
    template<> struct hash<winrt::MyCardDemo2::CardListViewModel> : winrt::impl::hash_base<winrt::MyCardDemo2::CardListViewModel> {};
    template<> struct hash<winrt::MyCardDemo2::CardModel> : winrt::impl::hash_base<winrt::MyCardDemo2::CardModel> {};
    template<> struct hash<winrt::MyCardDemo2::CardViewModel> : winrt::impl::hash_base<winrt::MyCardDemo2::CardViewModel> {};
    template<> struct hash<winrt::MyCardDemo2::MainPage> : winrt::impl::hash_base<winrt::MyCardDemo2::MainPage> {};
    template<> struct hash<winrt::MyCardDemo2::MyConverter> : winrt::impl::hash_base<winrt::MyCardDemo2::MyConverter> {};
    template<> struct hash<winrt::MyCardDemo2::SingleCardUserControl> : winrt::impl::hash_base<winrt::MyCardDemo2::SingleCardUserControl> {};
    template<> struct hash<winrt::MyCardDemo2::XamlMetaDataProvider> : winrt::impl::hash_base<winrt::MyCardDemo2::XamlMetaDataProvider> {};
}
#endif
