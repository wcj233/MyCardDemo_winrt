// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_Windows_Phone_System_UserProfile_GameServices_Core_H
#define WINRT_Windows_Phone_System_UserProfile_GameServices_Core_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.190506.1"), "Mismatched C++/WinRT headers.");
#include "winrt/Windows.Phone.System.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Storage.Streams.2.h"
#include "winrt/impl/Windows.Phone.System.UserProfile.GameServices.Core.2.h"
namespace winrt::impl
{
    template <typename D> Windows::Foundation::Uri consume_Windows_Phone_System_UserProfile_GameServices_Core_IGameService<D>::ServiceUri() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::System::UserProfile::GameServices::Core::IGameService)->get_ServiceUri(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection> consume_Windows_Phone_System_UserProfile_GameServices_Core_IGameService<D>::GetGamerProfileAsync() const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::System::UserProfile::GameServices::Core::IGameService)->GetGamerProfileAsync(&operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection> consume_Windows_Phone_System_UserProfile_GameServices_Core_IGameService<D>::GetInstalledGameItemsAsync() const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::System::UserProfile::GameServices::Core::IGameService)->GetInstalledGameItemsAsync(&operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<hstring> consume_Windows_Phone_System_UserProfile_GameServices_Core_IGameService<D>::GetPartnerTokenAsync(Windows::Foundation::Uri const& audienceUri) const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::System::UserProfile::GameServices::Core::IGameService)->GetPartnerTokenAsync(*(void**)(&audienceUri), &operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<hstring> consume_Windows_Phone_System_UserProfile_GameServices_Core_IGameService<D>::GetPrivilegesAsync() const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::System::UserProfile::GameServices::Core::IGameService)->GetPrivilegesAsync(&operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_System_UserProfile_GameServices_Core_IGameService<D>::GrantAchievement(uint32_t achievementId) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::System::UserProfile::GameServices::Core::IGameService)->GrantAchievement(achievementId));
    }
    template <typename D> void consume_Windows_Phone_System_UserProfile_GameServices_Core_IGameService<D>::GrantAvatarAward(uint32_t avatarAwardId) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::System::UserProfile::GameServices::Core::IGameService)->GrantAvatarAward(avatarAwardId));
    }
    template <typename D> void consume_Windows_Phone_System_UserProfile_GameServices_Core_IGameService<D>::PostResult(uint32_t gameVariant, Windows::Phone::System::UserProfile::GameServices::Core::GameServiceScoreKind const& scoreKind, int64_t scoreValue, Windows::Phone::System::UserProfile::GameServices::Core::GameServiceGameOutcome const& gameOutcome, Windows::Storage::Streams::IBuffer const& buffer) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::System::UserProfile::GameServices::Core::IGameService)->PostResult(gameVariant, static_cast<int32_t>(scoreKind), scoreValue, static_cast<int32_t>(gameOutcome), *(void**)(&buffer)));
    }
    template <typename D> void consume_Windows_Phone_System_UserProfile_GameServices_Core_IGameService2<D>::NotifyPartnerTokenExpired(Windows::Foundation::Uri const& audienceUri) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::System::UserProfile::GameServices::Core::IGameService2)->NotifyPartnerTokenExpired(*(void**)(&audienceUri)));
    }
    template <typename D> uint32_t consume_Windows_Phone_System_UserProfile_GameServices_Core_IGameService2<D>::GetAuthenticationStatus() const
    {
        uint32_t status;
        check_hresult(WINRT_SHIM(Windows::Phone::System::UserProfile::GameServices::Core::IGameService2)->GetAuthenticationStatus(&status));
        return status;
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::IInspectable> consume_Windows_Phone_System_UserProfile_GameServices_Core_IGameServicePropertyCollection<D>::GetPropertyAsync(param::hstring const& propertyName) const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::System::UserProfile::GameServices::Core::IGameServicePropertyCollection)->GetPropertyAsync(*(void**)(&propertyName), &operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D>
    struct produce<D, Windows::Phone::System::UserProfile::GameServices::Core::IGameService> : produce_base<D, Windows::Phone::System::UserProfile::GameServices::Core::IGameService>
    {
        int32_t WINRT_CALL get_ServiceUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Uri>(this->shim().ServiceUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetGamerProfileAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection>>(this->shim().GetGamerProfileAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetInstalledGameItemsAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection>>(this->shim().GetInstalledGameItemsAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetPartnerTokenAsync(void* audienceUri, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<hstring>>(this->shim().GetPartnerTokenAsync(*reinterpret_cast<Windows::Foundation::Uri const*>(&audienceUri)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetPrivilegesAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<hstring>>(this->shim().GetPrivilegesAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GrantAchievement(uint32_t achievementId) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GrantAchievement(achievementId);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GrantAvatarAward(uint32_t avatarAwardId) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GrantAvatarAward(avatarAwardId);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL PostResult(uint32_t gameVariant, int32_t scoreKind, int64_t scoreValue, int32_t gameOutcome, void* buffer) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PostResult(gameVariant, *reinterpret_cast<Windows::Phone::System::UserProfile::GameServices::Core::GameServiceScoreKind const*>(&scoreKind), scoreValue, *reinterpret_cast<Windows::Phone::System::UserProfile::GameServices::Core::GameServiceGameOutcome const*>(&gameOutcome), *reinterpret_cast<Windows::Storage::Streams::IBuffer const*>(&buffer));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::System::UserProfile::GameServices::Core::IGameService2> : produce_base<D, Windows::Phone::System::UserProfile::GameServices::Core::IGameService2>
    {
        int32_t WINRT_CALL NotifyPartnerTokenExpired(void* audienceUri) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyPartnerTokenExpired(*reinterpret_cast<Windows::Foundation::Uri const*>(&audienceUri));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetAuthenticationStatus(uint32_t* status) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *status = detach_from<uint32_t>(this->shim().GetAuthenticationStatus());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::System::UserProfile::GameServices::Core::IGameServicePropertyCollection> : produce_base<D, Windows::Phone::System::UserProfile::GameServices::Core::IGameServicePropertyCollection>
    {
        int32_t WINRT_CALL GetPropertyAsync(void* propertyName, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Foundation::IInspectable>>(this->shim().GetPropertyAsync(*reinterpret_cast<hstring const*>(&propertyName)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
namespace winrt::Windows::Phone::System::UserProfile::GameServices::Core
{
    inline Windows::Foundation::Uri GameService::ServiceUri()
    {
        return impl::call_factory<GameService, Windows::Phone::System::UserProfile::GameServices::Core::IGameService>([&](auto&& f) { return f.ServiceUri(); });
    }
    inline Windows::Foundation::IAsyncOperation<Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection> GameService::GetGamerProfileAsync()
    {
        return impl::call_factory<GameService, Windows::Phone::System::UserProfile::GameServices::Core::IGameService>([&](auto&& f) { return f.GetGamerProfileAsync(); });
    }
    inline Windows::Foundation::IAsyncOperation<Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection> GameService::GetInstalledGameItemsAsync()
    {
        return impl::call_factory<GameService, Windows::Phone::System::UserProfile::GameServices::Core::IGameService>([&](auto&& f) { return f.GetInstalledGameItemsAsync(); });
    }
    inline Windows::Foundation::IAsyncOperation<hstring> GameService::GetPartnerTokenAsync(Windows::Foundation::Uri const& audienceUri)
    {
        return impl::call_factory<GameService, Windows::Phone::System::UserProfile::GameServices::Core::IGameService>([&](auto&& f) { return f.GetPartnerTokenAsync(audienceUri); });
    }
    inline Windows::Foundation::IAsyncOperation<hstring> GameService::GetPrivilegesAsync()
    {
        return impl::call_factory<GameService, Windows::Phone::System::UserProfile::GameServices::Core::IGameService>([&](auto&& f) { return f.GetPrivilegesAsync(); });
    }
    inline void GameService::GrantAchievement(uint32_t achievementId)
    {
        impl::call_factory<GameService, Windows::Phone::System::UserProfile::GameServices::Core::IGameService>([&](auto&& f) { return f.GrantAchievement(achievementId); });
    }
    inline void GameService::GrantAvatarAward(uint32_t avatarAwardId)
    {
        impl::call_factory<GameService, Windows::Phone::System::UserProfile::GameServices::Core::IGameService>([&](auto&& f) { return f.GrantAvatarAward(avatarAwardId); });
    }
    inline void GameService::PostResult(uint32_t gameVariant, Windows::Phone::System::UserProfile::GameServices::Core::GameServiceScoreKind const& scoreKind, int64_t scoreValue, Windows::Phone::System::UserProfile::GameServices::Core::GameServiceGameOutcome const& gameOutcome, Windows::Storage::Streams::IBuffer const& buffer)
    {
        impl::call_factory<GameService, Windows::Phone::System::UserProfile::GameServices::Core::IGameService>([&](auto&& f) { return f.PostResult(gameVariant, scoreKind, scoreValue, gameOutcome, buffer); });
    }
    inline void GameService::NotifyPartnerTokenExpired(Windows::Foundation::Uri const& audienceUri)
    {
        impl::call_factory<GameService, Windows::Phone::System::UserProfile::GameServices::Core::IGameService2>([&](auto&& f) { return f.NotifyPartnerTokenExpired(audienceUri); });
    }
    inline uint32_t GameService::GetAuthenticationStatus()
    {
        return impl::call_factory<GameService, Windows::Phone::System::UserProfile::GameServices::Core::IGameService2>([&](auto&& f) { return f.GetAuthenticationStatus(); });
    }
}
namespace std
{
    template<> struct hash<winrt::Windows::Phone::System::UserProfile::GameServices::Core::IGameService> : winrt::impl::hash_base<winrt::Windows::Phone::System::UserProfile::GameServices::Core::IGameService> {};
    template<> struct hash<winrt::Windows::Phone::System::UserProfile::GameServices::Core::IGameService2> : winrt::impl::hash_base<winrt::Windows::Phone::System::UserProfile::GameServices::Core::IGameService2> {};
    template<> struct hash<winrt::Windows::Phone::System::UserProfile::GameServices::Core::IGameServicePropertyCollection> : winrt::impl::hash_base<winrt::Windows::Phone::System::UserProfile::GameServices::Core::IGameServicePropertyCollection> {};
    template<> struct hash<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService> : winrt::impl::hash_base<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameService> {};
    template<> struct hash<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection> : winrt::impl::hash_base<winrt::Windows::Phone::System::UserProfile::GameServices::Core::GameServicePropertyCollection> {};
}
#endif
