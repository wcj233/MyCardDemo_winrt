// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_Windows_Phone_PersonalInformation_H
#define WINRT_Windows_Phone_PersonalInformation_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.190506.1"), "Mismatched C++/WinRT headers.");
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.Storage.Streams.2.h"
#include "winrt/impl/Windows.Phone.PersonalInformation.2.h"
namespace winrt::impl
{
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactAddress<D>::Country() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactAddress)->get_Country(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactAddress<D>::Country(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactAddress)->put_Country(*(void**)(&value)));
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactAddress<D>::Locality() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactAddress)->get_Locality(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactAddress<D>::Locality(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactAddress)->put_Locality(*(void**)(&value)));
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactAddress<D>::Region() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactAddress)->get_Region(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactAddress<D>::Region(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactAddress)->put_Region(*(void**)(&value)));
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactAddress<D>::PostalCode() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactAddress)->get_PostalCode(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactAddress<D>::PostalCode(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactAddress)->put_PostalCode(*(void**)(&value)));
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactAddress<D>::StreetAddress() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactAddress)->get_StreetAddress(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactAddress<D>::StreetAddress(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactAddress)->put_StreetAddress(*(void**)(&value)));
    }
    template <typename D> Windows::Phone::PersonalInformation::ContactChangeType consume_Windows_Phone_PersonalInformation_IContactChangeRecord<D>::ChangeType() const
    {
        Windows::Phone::PersonalInformation::ContactChangeType value;
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactChangeRecord)->get_ChangeType(put_abi(value)));
        return value;
    }
    template <typename D> uint64_t consume_Windows_Phone_PersonalInformation_IContactChangeRecord<D>::RevisionNumber() const
    {
        uint64_t value;
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactChangeRecord)->get_RevisionNumber(&value));
        return value;
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactChangeRecord<D>::Id() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactChangeRecord)->get_Id(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactChangeRecord<D>::RemoteId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactChangeRecord)->get_RemoteId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactInformation<D>::DisplayName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->get_DisplayName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactInformation<D>::DisplayName(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->put_DisplayName(*(void**)(&value)));
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactInformation<D>::FamilyName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->get_FamilyName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactInformation<D>::FamilyName(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->put_FamilyName(*(void**)(&value)));
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactInformation<D>::GivenName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->get_GivenName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactInformation<D>::GivenName(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->put_GivenName(*(void**)(&value)));
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactInformation<D>::HonorificPrefix() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->get_HonorificPrefix(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactInformation<D>::HonorificPrefix(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->put_HonorificPrefix(*(void**)(&value)));
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IContactInformation<D>::HonorificSuffix() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->get_HonorificSuffix(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactInformation<D>::HonorificSuffix(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->put_HonorificSuffix(*(void**)(&value)));
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> consume_Windows_Phone_PersonalInformation_IContactInformation<D>::GetDisplayPictureAsync() const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->GetDisplayPictureAsync(&operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncAction consume_Windows_Phone_PersonalInformation_IContactInformation<D>::SetDisplayPictureAsync(Windows::Storage::Streams::IInputStream const& stream) const
    {
        void* action{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->SetDisplayPictureAsync(*(void**)(&stream), &action));
        return { action, take_ownership_from_abi };
    }
    template <typename D> Windows::Storage::Streams::IRandomAccessStreamReference consume_Windows_Phone_PersonalInformation_IContactInformation<D>::DisplayPicture() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->get_DisplayPicture(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable>> consume_Windows_Phone_PersonalInformation_IContactInformation<D>::GetPropertiesAsync() const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->GetPropertiesAsync(&operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> consume_Windows_Phone_PersonalInformation_IContactInformation<D>::ToVcardAsync() const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->ToVcardAsync(&operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> consume_Windows_Phone_PersonalInformation_IContactInformation<D>::ToVcardAsync(Windows::Phone::PersonalInformation::VCardFormat const& format) const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation)->ToVcardWithOptionsAsync(static_cast<int32_t>(format), &operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::DateTime consume_Windows_Phone_PersonalInformation_IContactInformation2<D>::DisplayPictureDate() const
    {
        Windows::Foundation::DateTime returnValue;
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation2)->get_DisplayPictureDate(put_abi(returnValue)));
        return returnValue;
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactInformation2<D>::DisplayPictureDate(Windows::Foundation::DateTime const& returnValue) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformation2)->put_DisplayPictureDate(impl::bind_in(returnValue)));
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactInformation> consume_Windows_Phone_PersonalInformation_IContactInformationStatics<D>::ParseVcardAsync(Windows::Storage::Streams::IInputStream const& vcard) const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactInformationStatics)->ParseVcardAsync(*(void**)(&vcard), &operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Collections::IVector<hstring> consume_Windows_Phone_PersonalInformation_IContactQueryOptions<D>::DesiredFields() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactQueryOptions)->get_DesiredFields(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Phone::PersonalInformation::ContactQueryResultOrdering consume_Windows_Phone_PersonalInformation_IContactQueryOptions<D>::OrderBy() const
    {
        Windows::Phone::PersonalInformation::ContactQueryResultOrdering value;
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactQueryOptions)->get_OrderBy(put_abi(value)));
        return value;
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IContactQueryOptions<D>::OrderBy(Windows::Phone::PersonalInformation::ContactQueryResultOrdering const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactQueryOptions)->put_OrderBy(static_cast<int32_t>(value)));
    }
    template <typename D> Windows::Foundation::IAsyncOperation<uint32_t> consume_Windows_Phone_PersonalInformation_IContactQueryResult<D>::GetContactCountAsync() const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactQueryResult)->GetContactCountAsync(&operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Phone::PersonalInformation::StoredContact>> consume_Windows_Phone_PersonalInformation_IContactQueryResult<D>::GetContactsAsync() const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactQueryResult)->GetContactsAsync(&operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Phone::PersonalInformation::StoredContact>> consume_Windows_Phone_PersonalInformation_IContactQueryResult<D>::GetContactsAsync(uint32_t startIndex, uint32_t maxNumberOfItems) const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactQueryResult)->GetContactsAsyncInRange(startIndex, maxNumberOfItems, &operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Phone::PersonalInformation::ContactQueryOptions consume_Windows_Phone_PersonalInformation_IContactQueryResult<D>::GetCurrentQueryOptions() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactQueryResult)->GetCurrentQueryOptions(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::StoredContact> consume_Windows_Phone_PersonalInformation_IContactStore<D>::FindContactByRemoteIdAsync(param::hstring const& id) const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStore)->FindContactByRemoteIdAsync(*(void**)(&id), &operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::StoredContact> consume_Windows_Phone_PersonalInformation_IContactStore<D>::FindContactByIdAsync(param::hstring const& id) const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStore)->FindContactByIdAsync(*(void**)(&id), &operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncAction consume_Windows_Phone_PersonalInformation_IContactStore<D>::DeleteContactAsync(param::hstring const& id) const
    {
        void* result{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStore)->DeleteContactAsync(*(void**)(&id), &result));
        return { result, take_ownership_from_abi };
    }
    template <typename D> Windows::Phone::PersonalInformation::ContactQueryResult consume_Windows_Phone_PersonalInformation_IContactStore<D>::CreateContactQuery() const
    {
        void* result{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStore)->CreateContactQueryDefault(&result));
        return { result, take_ownership_from_abi };
    }
    template <typename D> Windows::Phone::PersonalInformation::ContactQueryResult consume_Windows_Phone_PersonalInformation_IContactStore<D>::CreateContactQuery(Windows::Phone::PersonalInformation::ContactQueryOptions const& options) const
    {
        void* result{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStore)->CreateContactQueryWithOptions(*(void**)(&options), &result));
        return { result, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncAction consume_Windows_Phone_PersonalInformation_IContactStore<D>::DeleteAsync() const
    {
        void* result{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStore)->DeleteAsync(&result));
        return { result, take_ownership_from_abi };
    }
    template <typename D> uint64_t consume_Windows_Phone_PersonalInformation_IContactStore<D>::RevisionNumber() const
    {
        uint64_t value;
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStore)->get_RevisionNumber(&value));
        return value;
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Phone::PersonalInformation::ContactChangeRecord>> consume_Windows_Phone_PersonalInformation_IContactStore<D>::GetChangesAsync(uint64_t baseRevisionNumber) const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStore)->GetChangesAsync(baseRevisionNumber, &operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable>> consume_Windows_Phone_PersonalInformation_IContactStore<D>::LoadExtendedPropertiesAsync() const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStore)->LoadExtendedPropertiesAsync(&operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncAction consume_Windows_Phone_PersonalInformation_IContactStore<D>::SaveExtendedPropertiesAsync(param::map_view<hstring, Windows::Foundation::IInspectable> const& data) const
    {
        void* result{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStore)->SaveExtendedPropertiesAsync(*(void**)(&data), &result));
        return { result, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::StoredContact> consume_Windows_Phone_PersonalInformation_IContactStore2<D>::CreateMeContactAsync(param::hstring const& id) const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStore2)->CreateMeContactAsync(*(void**)(&id), &operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactStore> consume_Windows_Phone_PersonalInformation_IContactStoreStatics<D>::CreateOrOpenAsync() const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStoreStatics)->CreateOrOpenAsync(&operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactStore> consume_Windows_Phone_PersonalInformation_IContactStoreStatics<D>::CreateOrOpenAsync(Windows::Phone::PersonalInformation::ContactStoreSystemAccessMode const& access, Windows::Phone::PersonalInformation::ContactStoreApplicationAccessMode const& sharing) const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IContactStoreStatics)->CreateOrOpenWithOptionsAsync(static_cast<int32_t>(access), static_cast<int32_t>(sharing), &operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::DisplayName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_DisplayName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::FamilyName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_FamilyName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::GivenName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_GivenName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::HonorificPrefix() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_HonorificPrefix(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::HonorificSuffix() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_HonorificSuffix(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::AdditionalName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_AdditionalName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::Address() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_Address(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::OtherAddress() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_OtherAddress(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::Email() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_Email(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::WorkAddress() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_WorkAddress(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::WorkTelephone() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_WorkTelephone(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::JobTitle() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_JobTitle(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::Birthdate() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_Birthdate(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::Anniversary() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_Anniversary(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::Telephone() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_Telephone(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::MobileTelephone() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_MobileTelephone(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::Url() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_Url(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::Notes() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_Notes(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::WorkFax() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_WorkFax(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::Children() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_Children(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::SignificantOther() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_SignificantOther(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::CompanyName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_CompanyName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::CompanyTelephone() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_CompanyTelephone(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::HomeFax() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_HomeFax(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::AlternateTelephone() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_AlternateTelephone(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::Manager() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_Manager(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::Nickname() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_Nickname(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::OfficeLocation() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_OfficeLocation(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::WorkEmail() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_WorkEmail(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::YomiGivenName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_YomiGivenName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::YomiFamilyName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_YomiFamilyName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::YomiCompanyName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_YomiCompanyName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::OtherEmail() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_OtherEmail(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::AlternateMobileTelephone() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_AlternateMobileTelephone(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>::AlternateWorkTelephone() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics)->get_AlternateWorkTelephone(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Phone::PersonalInformation::ContactStore consume_Windows_Phone_PersonalInformation_IStoredContact<D>::Store() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IStoredContact)->get_Store(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IStoredContact<D>::Id() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IStoredContact)->get_Id(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Windows_Phone_PersonalInformation_IStoredContact<D>::RemoteId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IStoredContact)->get_RemoteId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Windows_Phone_PersonalInformation_IStoredContact<D>::RemoteId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IStoredContact)->put_RemoteId(*(void**)(&value)));
    }
    template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable>> consume_Windows_Phone_PersonalInformation_IStoredContact<D>::GetExtendedPropertiesAsync() const
    {
        void* operation{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IStoredContact)->GetExtendedPropertiesAsync(&operation));
        return { operation, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncAction consume_Windows_Phone_PersonalInformation_IStoredContact<D>::SaveAsync() const
    {
        void* result{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IStoredContact)->SaveAsync(&result));
        return { result, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IAsyncAction consume_Windows_Phone_PersonalInformation_IStoredContact<D>::ReplaceExistingContactAsync(param::hstring const& id) const
    {
        void* result{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IStoredContact)->ReplaceExistingContactAsync(*(void**)(&id), &result));
        return { result, take_ownership_from_abi };
    }
    template <typename D> Windows::Phone::PersonalInformation::StoredContact consume_Windows_Phone_PersonalInformation_IStoredContactFactory<D>::CreateStoredContact(Windows::Phone::PersonalInformation::ContactStore const& store) const
    {
        void* result{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IStoredContactFactory)->CreateStoredContact(*(void**)(&store), &result));
        return { result, take_ownership_from_abi };
    }
    template <typename D> Windows::Phone::PersonalInformation::StoredContact consume_Windows_Phone_PersonalInformation_IStoredContactFactory<D>::CreateStoredContactFromInformation(Windows::Phone::PersonalInformation::ContactStore const& store, Windows::Phone::PersonalInformation::ContactInformation const& contact) const
    {
        void* result{};
        check_hresult(WINRT_SHIM(Windows::Phone::PersonalInformation::IStoredContactFactory)->CreateStoredContactFromInformation(*(void**)(&store), *(void**)(&contact), &result));
        return { result, take_ownership_from_abi };
    }
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IContactAddress> : produce_base<D, Windows::Phone::PersonalInformation::IContactAddress>
    {
        int32_t WINRT_CALL get_Country(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Country());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Country(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Country(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Locality(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Locality());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Locality(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Locality(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Region(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Region());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Region(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Region(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_PostalCode(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().PostalCode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_PostalCode(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PostalCode(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_StreetAddress(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().StreetAddress());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_StreetAddress(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StreetAddress(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IContactChangeRecord> : produce_base<D, Windows::Phone::PersonalInformation::IContactChangeRecord>
    {
        int32_t WINRT_CALL get_ChangeType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Phone::PersonalInformation::ContactChangeType>(this->shim().ChangeType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_RevisionNumber(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().RevisionNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_RemoteId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().RemoteId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IContactInformation> : produce_base<D, Windows::Phone::PersonalInformation::IContactInformation>
    {
        int32_t WINRT_CALL get_DisplayName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DisplayName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_DisplayName(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisplayName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_FamilyName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FamilyName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_FamilyName(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FamilyName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_GivenName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().GivenName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_GivenName(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GivenName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HonorificPrefix(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().HonorificPrefix());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HonorificPrefix(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HonorificPrefix(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HonorificSuffix(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().HonorificSuffix());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HonorificSuffix(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HonorificSuffix(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetDisplayPictureAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream>>(this->shim().GetDisplayPictureAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL SetDisplayPictureAsync(void* stream, void** action) noexcept final try
        {
            clear_abi(action);
            typename D::abi_guard guard(this->shim());
            *action = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SetDisplayPictureAsync(*reinterpret_cast<Windows::Storage::Streams::IInputStream const*>(&stream)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_DisplayPicture(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Storage::Streams::IRandomAccessStreamReference>(this->shim().DisplayPicture());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetPropertiesAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable>>>(this->shim().GetPropertiesAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL ToVcardAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream>>(this->shim().ToVcardAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL ToVcardWithOptionsAsync(int32_t format, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream>>(this->shim().ToVcardAsync(*reinterpret_cast<Windows::Phone::PersonalInformation::VCardFormat const*>(&format)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IContactInformation2> : produce_base<D, Windows::Phone::PersonalInformation::IContactInformation2>
    {
        int32_t WINRT_CALL get_DisplayPictureDate(int64_t* returnValue) noexcept final try
        {
            zero_abi<Windows::Foundation::DateTime>(returnValue);
            typename D::abi_guard guard(this->shim());
            *returnValue = detach_from<Windows::Foundation::DateTime>(this->shim().DisplayPictureDate());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_DisplayPictureDate(int64_t returnValue) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisplayPictureDate(*reinterpret_cast<Windows::Foundation::DateTime const*>(&returnValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IContactInformationStatics> : produce_base<D, Windows::Phone::PersonalInformation::IContactInformationStatics>
    {
        int32_t WINRT_CALL ParseVcardAsync(void* vcard, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactInformation>>(this->shim().ParseVcardAsync(*reinterpret_cast<Windows::Storage::Streams::IInputStream const*>(&vcard)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IContactQueryOptions> : produce_base<D, Windows::Phone::PersonalInformation::IContactQueryOptions>
    {
        int32_t WINRT_CALL get_DesiredFields(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<hstring>>(this->shim().DesiredFields());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_OrderBy(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Phone::PersonalInformation::ContactQueryResultOrdering>(this->shim().OrderBy());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_OrderBy(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OrderBy(*reinterpret_cast<Windows::Phone::PersonalInformation::ContactQueryResultOrdering const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IContactQueryResult> : produce_base<D, Windows::Phone::PersonalInformation::IContactQueryResult>
    {
        int32_t WINRT_CALL GetContactCountAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<uint32_t>>(this->shim().GetContactCountAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetContactsAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Phone::PersonalInformation::StoredContact>>>(this->shim().GetContactsAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetContactsAsyncInRange(uint32_t startIndex, uint32_t maxNumberOfItems, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Phone::PersonalInformation::StoredContact>>>(this->shim().GetContactsAsync(startIndex, maxNumberOfItems));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetCurrentQueryOptions(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Phone::PersonalInformation::ContactQueryOptions>(this->shim().GetCurrentQueryOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IContactStore> : produce_base<D, Windows::Phone::PersonalInformation::IContactStore>
    {
        int32_t WINRT_CALL FindContactByRemoteIdAsync(void* id, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::StoredContact>>(this->shim().FindContactByRemoteIdAsync(*reinterpret_cast<hstring const*>(&id)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL FindContactByIdAsync(void* id, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::StoredContact>>(this->shim().FindContactByIdAsync(*reinterpret_cast<hstring const*>(&id)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL DeleteContactAsync(void* id, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Foundation::IAsyncAction>(this->shim().DeleteContactAsync(*reinterpret_cast<hstring const*>(&id)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL CreateContactQueryDefault(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Phone::PersonalInformation::ContactQueryResult>(this->shim().CreateContactQuery());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL CreateContactQueryWithOptions(void* options, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Phone::PersonalInformation::ContactQueryResult>(this->shim().CreateContactQuery(*reinterpret_cast<Windows::Phone::PersonalInformation::ContactQueryOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL DeleteAsync(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Foundation::IAsyncAction>(this->shim().DeleteAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_RevisionNumber(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().RevisionNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetChangesAsync(uint64_t baseRevisionNumber, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Phone::PersonalInformation::ContactChangeRecord>>>(this->shim().GetChangesAsync(baseRevisionNumber));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL LoadExtendedPropertiesAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable>>>(this->shim().LoadExtendedPropertiesAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL SaveExtendedPropertiesAsync(void* data, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SaveExtendedPropertiesAsync(*reinterpret_cast<Windows::Foundation::Collections::IMapView<hstring, Windows::Foundation::IInspectable> const*>(&data)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IContactStore2> : produce_base<D, Windows::Phone::PersonalInformation::IContactStore2>
    {
        int32_t WINRT_CALL CreateMeContactAsync(void* id, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::StoredContact>>(this->shim().CreateMeContactAsync(*reinterpret_cast<hstring const*>(&id)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IContactStoreStatics> : produce_base<D, Windows::Phone::PersonalInformation::IContactStoreStatics>
    {
        int32_t WINRT_CALL CreateOrOpenAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactStore>>(this->shim().CreateOrOpenAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL CreateOrOpenWithOptionsAsync(int32_t access, int32_t sharing, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactStore>>(this->shim().CreateOrOpenAsync(*reinterpret_cast<Windows::Phone::PersonalInformation::ContactStoreSystemAccessMode const*>(&access), *reinterpret_cast<Windows::Phone::PersonalInformation::ContactStoreApplicationAccessMode const*>(&sharing)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics> : produce_base<D, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>
    {
        int32_t WINRT_CALL get_DisplayName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DisplayName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_FamilyName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().FamilyName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_GivenName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().GivenName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HonorificPrefix(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().HonorificPrefix());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HonorificSuffix(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().HonorificSuffix());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_AdditionalName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AdditionalName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Address(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Address());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_OtherAddress(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().OtherAddress());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Email(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Email());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_WorkAddress(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().WorkAddress());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_WorkTelephone(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().WorkTelephone());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_JobTitle(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().JobTitle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Birthdate(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Birthdate());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Anniversary(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Anniversary());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Telephone(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Telephone());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_MobileTelephone(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().MobileTelephone());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Url(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Url());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Notes(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Notes());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_WorkFax(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().WorkFax());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Children(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Children());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_SignificantOther(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SignificantOther());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_CompanyName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CompanyName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_CompanyTelephone(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CompanyTelephone());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HomeFax(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().HomeFax());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_AlternateTelephone(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AlternateTelephone());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Manager(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Manager());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Nickname(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Nickname());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_OfficeLocation(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().OfficeLocation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_WorkEmail(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().WorkEmail());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_YomiGivenName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().YomiGivenName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_YomiFamilyName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().YomiFamilyName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_YomiCompanyName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().YomiCompanyName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_OtherEmail(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().OtherEmail());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_AlternateMobileTelephone(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AlternateMobileTelephone());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_AlternateWorkTelephone(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AlternateWorkTelephone());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IStoredContact> : produce_base<D, Windows::Phone::PersonalInformation::IStoredContact>
    {
        int32_t WINRT_CALL get_Store(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Phone::PersonalInformation::ContactStore>(this->shim().Store());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_RemoteId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().RemoteId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_RemoteId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoteId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetExtendedPropertiesAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable>>>(this->shim().GetExtendedPropertiesAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL SaveAsync(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Foundation::IAsyncAction>(this->shim().SaveAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL ReplaceExistingContactAsync(void* id, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Foundation::IAsyncAction>(this->shim().ReplaceExistingContactAsync(*reinterpret_cast<hstring const*>(&id)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::PersonalInformation::IStoredContactFactory> : produce_base<D, Windows::Phone::PersonalInformation::IStoredContactFactory>
    {
        int32_t WINRT_CALL CreateStoredContact(void* store, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Phone::PersonalInformation::StoredContact>(this->shim().CreateStoredContact(*reinterpret_cast<Windows::Phone::PersonalInformation::ContactStore const*>(&store)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL CreateStoredContactFromInformation(void* store, void* contact, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Phone::PersonalInformation::StoredContact>(this->shim().CreateStoredContactFromInformation(*reinterpret_cast<Windows::Phone::PersonalInformation::ContactStore const*>(&store), *reinterpret_cast<Windows::Phone::PersonalInformation::ContactInformation const*>(&contact)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
namespace winrt::Windows::Phone::PersonalInformation
{
    inline ContactAddress::ContactAddress() :
        ContactAddress(impl::call_factory<ContactAddress>([](auto&& f) { return f.template ActivateInstance<ContactAddress>(); }))
    {
    }
    inline ContactInformation::ContactInformation() :
        ContactInformation(impl::call_factory<ContactInformation>([](auto&& f) { return f.template ActivateInstance<ContactInformation>(); }))
    {
    }
    inline Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactInformation> ContactInformation::ParseVcardAsync(Windows::Storage::Streams::IInputStream const& vcard)
    {
        return impl::call_factory<ContactInformation, Windows::Phone::PersonalInformation::IContactInformationStatics>([&](auto&& f) { return f.ParseVcardAsync(vcard); });
    }
    inline ContactQueryOptions::ContactQueryOptions() :
        ContactQueryOptions(impl::call_factory<ContactQueryOptions>([](auto&& f) { return f.template ActivateInstance<ContactQueryOptions>(); }))
    {
    }
    inline Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactStore> ContactStore::CreateOrOpenAsync()
    {
        return impl::call_factory<ContactStore, Windows::Phone::PersonalInformation::IContactStoreStatics>([&](auto&& f) { return f.CreateOrOpenAsync(); });
    }
    inline Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactStore> ContactStore::CreateOrOpenAsync(Windows::Phone::PersonalInformation::ContactStoreSystemAccessMode const& access, Windows::Phone::PersonalInformation::ContactStoreApplicationAccessMode const& sharing)
    {
        return impl::call_factory<ContactStore, Windows::Phone::PersonalInformation::IContactStoreStatics>([&](auto&& f) { return f.CreateOrOpenAsync(access, sharing); });
    }
    inline hstring KnownContactProperties::DisplayName()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.DisplayName(); });
    }
    inline hstring KnownContactProperties::FamilyName()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.FamilyName(); });
    }
    inline hstring KnownContactProperties::GivenName()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.GivenName(); });
    }
    inline hstring KnownContactProperties::HonorificPrefix()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.HonorificPrefix(); });
    }
    inline hstring KnownContactProperties::HonorificSuffix()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.HonorificSuffix(); });
    }
    inline hstring KnownContactProperties::AdditionalName()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.AdditionalName(); });
    }
    inline hstring KnownContactProperties::Address()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.Address(); });
    }
    inline hstring KnownContactProperties::OtherAddress()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.OtherAddress(); });
    }
    inline hstring KnownContactProperties::Email()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.Email(); });
    }
    inline hstring KnownContactProperties::WorkAddress()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.WorkAddress(); });
    }
    inline hstring KnownContactProperties::WorkTelephone()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.WorkTelephone(); });
    }
    inline hstring KnownContactProperties::JobTitle()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.JobTitle(); });
    }
    inline hstring KnownContactProperties::Birthdate()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.Birthdate(); });
    }
    inline hstring KnownContactProperties::Anniversary()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.Anniversary(); });
    }
    inline hstring KnownContactProperties::Telephone()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.Telephone(); });
    }
    inline hstring KnownContactProperties::MobileTelephone()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.MobileTelephone(); });
    }
    inline hstring KnownContactProperties::Url()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.Url(); });
    }
    inline hstring KnownContactProperties::Notes()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.Notes(); });
    }
    inline hstring KnownContactProperties::WorkFax()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.WorkFax(); });
    }
    inline hstring KnownContactProperties::Children()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.Children(); });
    }
    inline hstring KnownContactProperties::SignificantOther()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.SignificantOther(); });
    }
    inline hstring KnownContactProperties::CompanyName()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.CompanyName(); });
    }
    inline hstring KnownContactProperties::CompanyTelephone()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.CompanyTelephone(); });
    }
    inline hstring KnownContactProperties::HomeFax()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.HomeFax(); });
    }
    inline hstring KnownContactProperties::AlternateTelephone()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.AlternateTelephone(); });
    }
    inline hstring KnownContactProperties::Manager()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.Manager(); });
    }
    inline hstring KnownContactProperties::Nickname()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.Nickname(); });
    }
    inline hstring KnownContactProperties::OfficeLocation()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.OfficeLocation(); });
    }
    inline hstring KnownContactProperties::WorkEmail()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.WorkEmail(); });
    }
    inline hstring KnownContactProperties::YomiGivenName()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.YomiGivenName(); });
    }
    inline hstring KnownContactProperties::YomiFamilyName()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.YomiFamilyName(); });
    }
    inline hstring KnownContactProperties::YomiCompanyName()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.YomiCompanyName(); });
    }
    inline hstring KnownContactProperties::OtherEmail()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.OtherEmail(); });
    }
    inline hstring KnownContactProperties::AlternateMobileTelephone()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.AlternateMobileTelephone(); });
    }
    inline hstring KnownContactProperties::AlternateWorkTelephone()
    {
        return impl::call_factory<KnownContactProperties, Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>([&](auto&& f) { return f.AlternateWorkTelephone(); });
    }
    inline StoredContact::StoredContact(Windows::Phone::PersonalInformation::ContactStore const& store) :
        StoredContact(impl::call_factory<StoredContact, Windows::Phone::PersonalInformation::IStoredContactFactory>([&](auto&& f) { return f.CreateStoredContact(store); }))
    {
    }
    inline StoredContact::StoredContact(Windows::Phone::PersonalInformation::ContactStore const& store, Windows::Phone::PersonalInformation::ContactInformation const& contact) :
        StoredContact(impl::call_factory<StoredContact, Windows::Phone::PersonalInformation::IStoredContactFactory>([&](auto&& f) { return f.CreateStoredContactFromInformation(store, contact); }))
    {
    }
}
namespace std
{
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IContactAddress> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IContactAddress> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IContactChangeRecord> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IContactChangeRecord> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IContactInformation> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IContactInformation> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IContactInformation2> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IContactInformation2> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IContactInformationStatics> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IContactInformationStatics> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IContactQueryOptions> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IContactQueryOptions> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IContactQueryResult> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IContactQueryResult> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IContactStore> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IContactStore> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IContactStore2> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IContactStore2> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IContactStoreStatics> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IContactStoreStatics> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IStoredContact> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IStoredContact> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::IStoredContactFactory> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::IStoredContactFactory> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::ContactAddress> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::ContactAddress> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::ContactChangeRecord> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::ContactChangeRecord> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::ContactInformation> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::ContactInformation> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::ContactQueryOptions> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::ContactQueryOptions> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::ContactQueryResult> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::ContactQueryResult> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::ContactStore> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::ContactStore> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::KnownContactProperties> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::KnownContactProperties> {};
    template<> struct hash<winrt::Windows::Phone::PersonalInformation::StoredContact> : winrt::impl::hash_base<winrt::Windows::Phone::PersonalInformation::StoredContact> {};
}
#endif
