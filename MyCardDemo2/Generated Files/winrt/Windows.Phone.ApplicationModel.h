// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_Windows_Phone_ApplicationModel_H
#define WINRT_Windows_Phone_ApplicationModel_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.190506.1"), "Mismatched C++/WinRT headers.");
#include "winrt/impl/Windows.Phone.ApplicationModel.2.h"
namespace winrt::impl
{
    template <typename D> Windows::Phone::ApplicationModel::ApplicationProfileModes consume_Windows_Phone_ApplicationModel_IApplicationProfileStatics<D>::Modes() const
    {
        Windows::Phone::ApplicationModel::ApplicationProfileModes value;
        check_hresult(WINRT_SHIM(Windows::Phone::ApplicationModel::IApplicationProfileStatics)->get_Modes(put_abi(value)));
        return value;
    }
    template <typename D>
    struct produce<D, Windows::Phone::ApplicationModel::IApplicationProfileStatics> : produce_base<D, Windows::Phone::ApplicationModel::IApplicationProfileStatics>
    {
        int32_t WINRT_CALL get_Modes(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Phone::ApplicationModel::ApplicationProfileModes>(this->shim().Modes());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
namespace winrt::Windows::Phone::ApplicationModel
{
    inline Windows::Phone::ApplicationModel::ApplicationProfileModes ApplicationProfile::Modes()
    {
        return impl::call_factory<ApplicationProfile, Windows::Phone::ApplicationModel::IApplicationProfileStatics>([&](auto&& f) { return f.Modes(); });
    }
}
namespace std
{
    template<> struct hash<winrt::Windows::Phone::ApplicationModel::IApplicationProfileStatics> : winrt::impl::hash_base<winrt::Windows::Phone::ApplicationModel::IApplicationProfileStatics> {};
    template<> struct hash<winrt::Windows::Phone::ApplicationModel::ApplicationProfile> : winrt::impl::hash_base<winrt::Windows::Phone::ApplicationModel::ApplicationProfile> {};
}
#endif
