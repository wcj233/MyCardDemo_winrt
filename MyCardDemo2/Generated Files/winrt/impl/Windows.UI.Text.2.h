// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_Windows_UI_Text_2_H
#define WINRT_Windows_UI_Text_2_H
#include "winrt/impl/Windows.UI.1.h"
#include "winrt/impl/Windows.UI.Text.1.h"
namespace winrt::Windows::UI::Text
{
    struct FontWeight
    {
        uint16_t Weight;
    };
    inline bool operator==(FontWeight const& left, FontWeight const& right) noexcept
    {
        return left.Weight == right.Weight;
    }
    inline bool operator!=(FontWeight const& left, FontWeight const& right) noexcept
    {
        return !(left == right);
    }
    struct WINRT_EBO ContentLinkInfo : Windows::UI::Text::IContentLinkInfo
    {
        ContentLinkInfo(std::nullptr_t) noexcept {}
        ContentLinkInfo(void* ptr, take_ownership_from_abi_t) noexcept : Windows::UI::Text::IContentLinkInfo(ptr, take_ownership_from_abi) {}
        ContentLinkInfo();
    };
    struct WINRT_EBO FontWeights : Windows::UI::Text::IFontWeights
    {
        FontWeights(std::nullptr_t) noexcept {}
        FontWeights(void* ptr, take_ownership_from_abi_t) noexcept : Windows::UI::Text::IFontWeights(ptr, take_ownership_from_abi) {}
        static Windows::UI::Text::FontWeight Black();
        static Windows::UI::Text::FontWeight Bold();
        static Windows::UI::Text::FontWeight ExtraBlack();
        static Windows::UI::Text::FontWeight ExtraBold();
        static Windows::UI::Text::FontWeight ExtraLight();
        static Windows::UI::Text::FontWeight Light();
        static Windows::UI::Text::FontWeight Medium();
        static Windows::UI::Text::FontWeight Normal();
        static Windows::UI::Text::FontWeight SemiBold();
        static Windows::UI::Text::FontWeight SemiLight();
        static Windows::UI::Text::FontWeight Thin();
    };
    struct WINRT_EBO RichEditTextDocument : Windows::UI::Text::ITextDocument,
        impl::require<RichEditTextDocument, Windows::UI::Text::ITextDocument2, Windows::UI::Text::ITextDocument3>
    {
        RichEditTextDocument(std::nullptr_t) noexcept {}
        RichEditTextDocument(void* ptr, take_ownership_from_abi_t) noexcept : Windows::UI::Text::ITextDocument(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO RichEditTextRange : Windows::UI::Text::ITextRange,
        impl::require<RichEditTextRange, Windows::UI::Text::IRichEditTextRange>
    {
        RichEditTextRange(std::nullptr_t) noexcept {}
        RichEditTextRange(void* ptr, take_ownership_from_abi_t) noexcept : Windows::UI::Text::ITextRange(ptr, take_ownership_from_abi) {}
    };
    struct TextConstants
    {
        TextConstants() = delete;
        static Windows::UI::Color AutoColor();
        static int32_t MinUnitCount();
        static int32_t MaxUnitCount();
        static Windows::UI::Color UndefinedColor();
        static float UndefinedFloatValue();
        static int32_t UndefinedInt32Value();
        static Windows::UI::Text::FontStretch UndefinedFontStretch();
        static Windows::UI::Text::FontStyle UndefinedFontStyle();
    };
}
#endif
