// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_Windows_Globalization_1_H
#define WINRT_Windows_Globalization_1_H
#include "winrt/impl/Windows.Globalization.0.h"
namespace winrt::Windows::Globalization
{
    struct WINRT_EBO IApplicationLanguagesStatics :
        Windows::Foundation::IInspectable,
        impl::consume_t<IApplicationLanguagesStatics>
    {
        IApplicationLanguagesStatics(std::nullptr_t = nullptr) noexcept {}
        IApplicationLanguagesStatics(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO IApplicationLanguagesStatics2 :
        Windows::Foundation::IInspectable,
        impl::consume_t<IApplicationLanguagesStatics2>
    {
        IApplicationLanguagesStatics2(std::nullptr_t = nullptr) noexcept {}
        IApplicationLanguagesStatics2(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ICalendar :
        Windows::Foundation::IInspectable,
        impl::consume_t<ICalendar>
    {
        ICalendar(std::nullptr_t = nullptr) noexcept {}
        ICalendar(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ICalendarFactory :
        Windows::Foundation::IInspectable,
        impl::consume_t<ICalendarFactory>
    {
        ICalendarFactory(std::nullptr_t = nullptr) noexcept {}
        ICalendarFactory(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ICalendarFactory2 :
        Windows::Foundation::IInspectable,
        impl::consume_t<ICalendarFactory2>
    {
        ICalendarFactory2(std::nullptr_t = nullptr) noexcept {}
        ICalendarFactory2(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ICalendarIdentifiersStatics :
        Windows::Foundation::IInspectable,
        impl::consume_t<ICalendarIdentifiersStatics>
    {
        ICalendarIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
        ICalendarIdentifiersStatics(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ICalendarIdentifiersStatics2 :
        Windows::Foundation::IInspectable,
        impl::consume_t<ICalendarIdentifiersStatics2>
    {
        ICalendarIdentifiersStatics2(std::nullptr_t = nullptr) noexcept {}
        ICalendarIdentifiersStatics2(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ICalendarIdentifiersStatics3 :
        Windows::Foundation::IInspectable,
        impl::consume_t<ICalendarIdentifiersStatics3>
    {
        ICalendarIdentifiersStatics3(std::nullptr_t = nullptr) noexcept {}
        ICalendarIdentifiersStatics3(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO IClockIdentifiersStatics :
        Windows::Foundation::IInspectable,
        impl::consume_t<IClockIdentifiersStatics>
    {
        IClockIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
        IClockIdentifiersStatics(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ICurrencyAmount :
        Windows::Foundation::IInspectable,
        impl::consume_t<ICurrencyAmount>
    {
        ICurrencyAmount(std::nullptr_t = nullptr) noexcept {}
        ICurrencyAmount(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ICurrencyAmountFactory :
        Windows::Foundation::IInspectable,
        impl::consume_t<ICurrencyAmountFactory>
    {
        ICurrencyAmountFactory(std::nullptr_t = nullptr) noexcept {}
        ICurrencyAmountFactory(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ICurrencyIdentifiersStatics :
        Windows::Foundation::IInspectable,
        impl::consume_t<ICurrencyIdentifiersStatics>
    {
        ICurrencyIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
        ICurrencyIdentifiersStatics(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ICurrencyIdentifiersStatics2 :
        Windows::Foundation::IInspectable,
        impl::consume_t<ICurrencyIdentifiersStatics2>
    {
        ICurrencyIdentifiersStatics2(std::nullptr_t = nullptr) noexcept {}
        ICurrencyIdentifiersStatics2(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ICurrencyIdentifiersStatics3 :
        Windows::Foundation::IInspectable,
        impl::consume_t<ICurrencyIdentifiersStatics3>
    {
        ICurrencyIdentifiersStatics3(std::nullptr_t = nullptr) noexcept {}
        ICurrencyIdentifiersStatics3(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO IGeographicRegion :
        Windows::Foundation::IInspectable,
        impl::consume_t<IGeographicRegion>
    {
        IGeographicRegion(std::nullptr_t = nullptr) noexcept {}
        IGeographicRegion(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO IGeographicRegionFactory :
        Windows::Foundation::IInspectable,
        impl::consume_t<IGeographicRegionFactory>
    {
        IGeographicRegionFactory(std::nullptr_t = nullptr) noexcept {}
        IGeographicRegionFactory(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO IGeographicRegionStatics :
        Windows::Foundation::IInspectable,
        impl::consume_t<IGeographicRegionStatics>
    {
        IGeographicRegionStatics(std::nullptr_t = nullptr) noexcept {}
        IGeographicRegionStatics(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO IJapanesePhoneme :
        Windows::Foundation::IInspectable,
        impl::consume_t<IJapanesePhoneme>
    {
        IJapanesePhoneme(std::nullptr_t = nullptr) noexcept {}
        IJapanesePhoneme(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO IJapanesePhoneticAnalyzerStatics :
        Windows::Foundation::IInspectable,
        impl::consume_t<IJapanesePhoneticAnalyzerStatics>
    {
        IJapanesePhoneticAnalyzerStatics(std::nullptr_t = nullptr) noexcept {}
        IJapanesePhoneticAnalyzerStatics(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ILanguage :
        Windows::Foundation::IInspectable,
        impl::consume_t<ILanguage>
    {
        ILanguage(std::nullptr_t = nullptr) noexcept {}
        ILanguage(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ILanguage2 :
        Windows::Foundation::IInspectable,
        impl::consume_t<ILanguage2>
    {
        ILanguage2(std::nullptr_t = nullptr) noexcept {}
        ILanguage2(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ILanguageExtensionSubtags :
        Windows::Foundation::IInspectable,
        impl::consume_t<ILanguageExtensionSubtags>
    {
        ILanguageExtensionSubtags(std::nullptr_t = nullptr) noexcept {}
        ILanguageExtensionSubtags(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ILanguageFactory :
        Windows::Foundation::IInspectable,
        impl::consume_t<ILanguageFactory>
    {
        ILanguageFactory(std::nullptr_t = nullptr) noexcept {}
        ILanguageFactory(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ILanguageStatics :
        Windows::Foundation::IInspectable,
        impl::consume_t<ILanguageStatics>
    {
        ILanguageStatics(std::nullptr_t = nullptr) noexcept {}
        ILanguageStatics(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ILanguageStatics2 :
        Windows::Foundation::IInspectable,
        impl::consume_t<ILanguageStatics2>
    {
        ILanguageStatics2(std::nullptr_t = nullptr) noexcept {}
        ILanguageStatics2(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO INumeralSystemIdentifiersStatics :
        Windows::Foundation::IInspectable,
        impl::consume_t<INumeralSystemIdentifiersStatics>
    {
        INumeralSystemIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
        INumeralSystemIdentifiersStatics(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO INumeralSystemIdentifiersStatics2 :
        Windows::Foundation::IInspectable,
        impl::consume_t<INumeralSystemIdentifiersStatics2>
    {
        INumeralSystemIdentifiersStatics2(std::nullptr_t = nullptr) noexcept {}
        INumeralSystemIdentifiersStatics2(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO ITimeZoneOnCalendar :
        Windows::Foundation::IInspectable,
        impl::consume_t<ITimeZoneOnCalendar>
    {
        ITimeZoneOnCalendar(std::nullptr_t = nullptr) noexcept {}
        ITimeZoneOnCalendar(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
}
#endif
