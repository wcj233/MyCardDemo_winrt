// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_Microsoft_Toolkit_Uwp_Notifications_0_H
#define WINRT_Microsoft_Toolkit_Uwp_Notifications_0_H
namespace winrt::Windows::Data::Xml::Dom
{
    struct XmlDocument;
}
namespace winrt::Windows::Foundation
{
    template <typename T> struct IReference;
    struct Uri;
}
namespace winrt::Windows::Foundation::Collections
{
    template <typename K, typename V> struct IMap;
    template <typename T> struct IVector;
}
namespace winrt::Microsoft::Toolkit::Uwp::Notifications
{
    enum class AdaptiveImageAlign : int32_t
    {
        Default = 0,
        Stretch = 1,
        Left = 2,
        Center = 3,
        Right = 4,
    };
    enum class AdaptiveImageCrop : int32_t
    {
        Default = 0,
        None = 1,
        Circle = 2,
    };
    enum class AdaptiveProgressBarBindableProperty : int32_t
    {
        Title = 0,
        Value = 1,
        ValueStringOverride = 2,
        Status = 3,
    };
    enum class AdaptiveSubgroupTextStacking : int32_t
    {
        Default = 0,
        Top = 1,
        Center = 2,
        Bottom = 3,
    };
    enum class AdaptiveTextAlign : int32_t
    {
        Default = 0,
        Auto = 1,
        Left = 2,
        Center = 3,
        Right = 4,
    };
    enum class AdaptiveTextBindableProperty : int32_t
    {
        Text = 0,
    };
    enum class AdaptiveTextStyle : int32_t
    {
        Default = 0,
        Caption = 1,
        CaptionSubtle = 2,
        Body = 3,
        BodySubtle = 4,
        Base = 5,
        BaseSubtle = 6,
        Subtitle = 7,
        SubtitleSubtle = 8,
        Title = 9,
        TitleSubtle = 10,
        TitleNumeral = 11,
        Subheader = 12,
        SubheaderSubtle = 13,
        SubheaderNumeral = 14,
        Header = 15,
        HeaderSubtle = 16,
        HeaderNumeral = 17,
    };
    enum class BadgeGlyphValue : int32_t
    {
        None = 0,
        Activity = 1,
        Alert = 2,
        Alarm = 3,
        Available = 4,
        Away = 5,
        Busy = 6,
        NewMessage = 7,
        Paused = 8,
        Playing = 9,
        Unavailable = 10,
        Error = 11,
        Attention = 12,
    };
    enum class TileBackgroundImageCrop : int32_t
    {
        Default = 0,
        None = 1,
        Circle = 2,
    };
    enum class TileBranding : int32_t
    {
        Auto = 0,
        None = 1,
        Name = 2,
        Logo = 3,
        NameAndLogo = 4,
    };
    enum class TilePeekImageCrop : int32_t
    {
        Default = 0,
        None = 1,
        Circle = 2,
    };
    enum class TileTextStacking : int32_t
    {
        Top = 0,
        Center = 1,
        Bottom = 2,
    };
    enum class ToastActivationType : int32_t
    {
        Foreground = 0,
        Background = 1,
        Protocol = 2,
    };
    enum class ToastAfterActivationBehavior : int32_t
    {
        Default = 0,
        PendingUpdate = 1,
    };
    enum class ToastDuration : int32_t
    {
        Short = 0,
        Long = 1,
    };
    enum class ToastGenericAppLogoCrop : int32_t
    {
        Default = 0,
        None = 1,
        Circle = 2,
    };
    enum class ToastImageCrop : int32_t
    {
        None = 0,
        Circle = 1,
    };
    enum class ToastScenario : int32_t
    {
        Default = 0,
        Alarm = 1,
        Reminder = 2,
        IncomingCall = 3,
    };
    struct IAdaptiveChild;
    struct IAdaptiveGroupClass;
    struct IAdaptiveImageClass;
    struct IAdaptiveProgressBarClass;
    struct IAdaptiveProgressBarValueClass;
    struct IAdaptiveProgressBarValueStatic;
    struct IAdaptiveSubgroupChild;
    struct IAdaptiveSubgroupClass;
    struct IAdaptiveTextClass;
    struct IBadgeGlyphContentClass;
    struct IBadgeGlyphContentFactory;
    struct IBadgeNumericContentClass;
    struct IBadgeNumericContentFactory;
    struct IBaseImage;
    struct IBaseText;
    struct INotificationContent;
    struct ITileBackgroundImageClass;
    struct ITileBasicTextClass;
    struct ITileBindingClass;
    struct ITileBindingContent;
    struct ITileBindingContentAdaptiveChild;
    struct ITileBindingContentAdaptiveClass;
    struct ITileBindingContentContactClass;
    struct ITileBindingContentIconicClass;
    struct ITileBindingContentPeopleClass;
    struct ITileBindingContentPhotosClass;
    struct ITileContentClass;
    struct ITilePeekImageClass;
    struct ITileVisualClass;
    struct IToastActions;
    struct IToastActionsCustomClass;
    struct IToastActivationOptionsClass;
    struct IToastAudioClass;
    struct IToastBindingGenericChild;
    struct IToastBindingGenericClass;
    struct IToastBindingShoulderTapClass;
    struct IToastButton;
    struct IToastButtonClass;
    struct IToastButtonDismissClass;
    struct IToastButtonDismissFactory;
    struct IToastButtonFactory;
    struct IToastButtonSnoozeClass;
    struct IToastButtonSnoozeFactory;
    struct IToastContentClass;
    struct IToastContextMenuItemClass;
    struct IToastContextMenuItemFactory;
    struct IToastGenericAppLogoClass;
    struct IToastHeaderClass;
    struct IToastHeaderFactory;
    struct IToastInput;
    struct IToastPeopleClass;
    struct IToastSelectionBoxClass;
    struct IToastSelectionBoxFactory;
    struct IToastSelectionBoxItemClass;
    struct IToastSelectionBoxItemFactory;
    struct IToastShoulderTapImageClass;
    struct IToastSpriteSheetClass;
    struct IToastTextBoxClass;
    struct IToastTextBoxFactory;
    struct IToastVisualClass;
    struct AdaptiveGroup;
    struct AdaptiveImage;
    struct AdaptiveProgressBar;
    struct AdaptiveProgressBarValue;
    struct AdaptiveSubgroup;
    struct AdaptiveText;
    struct BadgeGlyphContent;
    struct BadgeNumericContent;
    struct TileBackgroundImage;
    struct TileBasicImage;
    struct TileBasicText;
    struct TileBinding;
    struct TileBindingContentAdaptive;
    struct TileBindingContentContact;
    struct TileBindingContentIconic;
    struct TileBindingContentPeople;
    struct TileBindingContentPhotos;
    struct TileContent;
    struct TilePeekImage;
    struct TileVisual;
    struct ToastActionsCustom;
    struct ToastActionsSnoozeAndDismiss;
    struct ToastActivationOptions;
    struct ToastAudio;
    struct ToastBindingGeneric;
    struct ToastBindingShoulderTap;
    struct ToastButton;
    struct ToastButtonDismiss;
    struct ToastButtonSnooze;
    struct ToastContent;
    struct ToastContextMenuItem;
    struct ToastGenericAppLogo;
    struct ToastGenericAttributionText;
    struct ToastGenericHeroImage;
    struct ToastHeader;
    struct ToastPeople;
    struct ToastSelectionBox;
    struct ToastSelectionBoxItem;
    struct ToastShoulderTapImage;
    struct ToastSpriteSheet;
    struct ToastTextBox;
    struct ToastVisual;
}
namespace winrt::impl
{
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveChild>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveGroupClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IBaseImage>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IBaseText>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::INotificationContent>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPeopleClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPhotosClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileContentClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastActions>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastButton>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastButtonFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastContentClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastHeaderFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastInput>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass>
    {
        using type = interface_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveGroup>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveImage>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBar>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroup>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveText>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphContent>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::BadgeNumericContent>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImage>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileBasicText>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileBinding>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentAdaptive>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentContact>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentIconic>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentPeople>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentPhotos>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileContent>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TilePeekImage>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileVisual>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastActionsCustom>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastActionsSnoozeAndDismiss>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastAudio>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastBindingGeneric>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastBindingShoulderTap>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastButton>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastButtonDismiss>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastButtonSnooze>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastContent>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastContextMenuItem>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogo>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAttributionText>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastGenericHeroImage>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastHeader>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastPeople>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBox>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBoxItem>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastShoulderTapImage>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastSpriteSheet>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastTextBox>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastVisual>
    {
        using type = class_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageAlign>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageCrop>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarBindableProperty>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroupTextStacking>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextAlign>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextBindableProperty>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextStyle>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImageCrop>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileBranding>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TilePeekImageCrop>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::TileTextStacking>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastActivationType>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastAfterActivationBehavior>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastDuration>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogoCrop>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastImageCrop>
    {
        using type = enum_category;
    };
    template <> struct category<Microsoft::Toolkit::Uwp::Notifications::ToastScenario>
    {
        using type = enum_category;
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveChild>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IAdaptiveChild" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveGroupClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IAdaptiveGroupClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IAdaptiveImageClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IAdaptiveProgressBarClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IAdaptiveProgressBarValueClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IAdaptiveProgressBarValueStatic" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IAdaptiveSubgroupChild" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IAdaptiveSubgroupClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IAdaptiveTextClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IBadgeGlyphContentClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentFactory>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IBadgeGlyphContentFactory" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IBadgeNumericContentClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentFactory>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IBadgeNumericContentFactory" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IBaseImage>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IBaseImage" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IBaseText>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IBaseText" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::INotificationContent>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.INotificationContent" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileBackgroundImageClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileBasicTextClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileBindingClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileBindingContent" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileBindingContentAdaptiveChild" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileBindingContentAdaptiveClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileBindingContentContactClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileBindingContentIconicClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPeopleClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileBindingContentPeopleClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPhotosClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileBindingContentPhotosClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileContentClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileContentClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITilePeekImageClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ITileVisualClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastActions>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastActions" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastActionsCustomClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastActivationOptionsClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastAudioClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastBindingGenericChild" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastBindingGenericClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastBindingShoulderTapClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastButton>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastButton" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastButtonClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastButtonDismissClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissFactory>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastButtonDismissFactory" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastButtonFactory>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastButtonFactory" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastButtonSnoozeClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeFactory>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastButtonSnoozeFactory" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastContentClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastContentClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastContextMenuItemClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemFactory>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastContextMenuItemFactory" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastGenericAppLogoClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastHeaderClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastHeaderFactory>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastHeaderFactory" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastInput>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastInput" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastPeopleClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastSelectionBoxClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxFactory>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastSelectionBoxFactory" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastSelectionBoxItemClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemFactory>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastSelectionBoxItemFactory" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastShoulderTapImageClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastSpriteSheetClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastTextBoxClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxFactory>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastTextBoxFactory" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.IToastVisualClass" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveGroup>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveGroup" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveImage>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveImage" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBar>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveProgressBar" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveProgressBarValue" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroup>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveSubgroup" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveText>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveText" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphContent>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.BadgeGlyphContent" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::BadgeNumericContent>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.BadgeNumericContent" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImage>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileBackgroundImage" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileBasicImage" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileBasicText>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileBasicText" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileBinding>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileBinding" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentAdaptive>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileBindingContentAdaptive" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentContact>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileBindingContentContact" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentIconic>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileBindingContentIconic" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentPeople>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileBindingContentPeople" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentPhotos>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileBindingContentPhotos" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileContent>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileContent" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TilePeekImage>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TilePeekImage" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileVisual>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileVisual" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastActionsCustom>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastActionsCustom" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastActionsSnoozeAndDismiss>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastActionsSnoozeAndDismiss" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastActivationOptions" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastAudio>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastAudio" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastBindingGeneric>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastBindingGeneric" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastBindingShoulderTap>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastBindingShoulderTap" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastButton>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastButton" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastButtonDismiss>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastButtonDismiss" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastButtonSnooze>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastButtonSnooze" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastContent>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastContent" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastContextMenuItem>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastContextMenuItem" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogo>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastGenericAppLogo" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAttributionText>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastGenericAttributionText" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastGenericHeroImage>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastGenericHeroImage" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastHeader>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastHeader" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastPeople>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastPeople" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBox>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastSelectionBox" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBoxItem>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastSelectionBoxItem" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastShoulderTapImage>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastShoulderTapImage" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastSpriteSheet>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastSpriteSheet" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastTextBox>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastTextBox" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastVisual>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastVisual" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageAlign>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveImageAlign" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageCrop>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveImageCrop" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarBindableProperty>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveProgressBarBindableProperty" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroupTextStacking>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveSubgroupTextStacking" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextAlign>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveTextAlign" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextBindableProperty>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveTextBindableProperty" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextStyle>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.AdaptiveTextStyle" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.BadgeGlyphValue" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImageCrop>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileBackgroundImageCrop" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileBranding>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileBranding" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TilePeekImageCrop>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TilePeekImageCrop" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::TileTextStacking>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.TileTextStacking" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastActivationType>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastActivationType" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastAfterActivationBehavior>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastAfterActivationBehavior" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastDuration>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastDuration" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogoCrop>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastGenericAppLogoCrop" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastImageCrop>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastImageCrop" };
    };
    template <> struct name<Microsoft::Toolkit::Uwp::Notifications::ToastScenario>
    {
        static constexpr auto & value{ L"Microsoft.Toolkit.Uwp.Notifications.ToastScenario" };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveChild>
    {
        static constexpr guid value{ 0x4DFC36BC,0xA032,0x5808,{ 0x58,0x5B,0xFE,0x27,0xD9,0xA7,0x40,0x30 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveGroupClass>
    {
        static constexpr guid value{ 0xB82EB2B7,0xF1E7,0x5B7A,{ 0x48,0xE6,0xAA,0x9B,0xF8,0x81,0x30,0x93 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass>
    {
        static constexpr guid value{ 0x9734BF55,0x6A2D,0x53E0,{ 0x46,0x4F,0xF1,0xDB,0x95,0x9A,0xC2,0x0F } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass>
    {
        static constexpr guid value{ 0x9D41F817,0x726C,0x5E4E,{ 0x70,0xD0,0x02,0x97,0x98,0x25,0x00,0x70 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass>
    {
        static constexpr guid value{ 0x354A7D3D,0x6F44,0x5B1B,{ 0x6C,0xAE,0xBA,0x0A,0xCC,0xCE,0x34,0xA7 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic>
    {
        static constexpr guid value{ 0x8CCB5ED4,0x2DAE,0x5180,{ 0x5F,0xA6,0xC3,0xEC,0xEE,0xFB,0xD6,0x35 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild>
    {
        static constexpr guid value{ 0x1DDD3ADC,0x45D8,0x5439,{ 0x42,0x89,0x59,0xA2,0x5C,0x3D,0xC0,0x48 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass>
    {
        static constexpr guid value{ 0xA98568F2,0x5876,0x5F61,{ 0x76,0x85,0xAD,0xAE,0xA3,0x1F,0x03,0x0B } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass>
    {
        static constexpr guid value{ 0x5C838F8A,0x2DB9,0x5076,{ 0x58,0x49,0x85,0xF2,0x62,0x11,0xDB,0x98 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass>
    {
        static constexpr guid value{ 0x9625AF99,0x489F,0x5377,{ 0x4F,0xA1,0x29,0xCE,0x98,0x4D,0xC4,0x7A } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentFactory>
    {
        static constexpr guid value{ 0xA7EF6C95,0x7F77,0x5B9B,{ 0x63,0x68,0x71,0x59,0x21,0x5C,0xB7,0x58 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass>
    {
        static constexpr guid value{ 0x959F5331,0x19EF,0x5282,{ 0x5C,0x06,0x59,0x80,0x8B,0x4A,0x30,0xC5 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentFactory>
    {
        static constexpr guid value{ 0x6CEA6850,0xD297,0x5A11,{ 0x7D,0x22,0x1D,0x20,0xA3,0xB5,0xBE,0xDE } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IBaseImage>
    {
        static constexpr guid value{ 0x7F6D2BB6,0x2B66,0x560D,{ 0x5A,0x9C,0xD7,0x9C,0x56,0x31,0xBF,0xD5 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IBaseText>
    {
        static constexpr guid value{ 0x41AF5050,0x74D2,0x5652,{ 0x5C,0x0A,0x27,0x9C,0xDA,0x7D,0xFB,0x1C } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::INotificationContent>
    {
        static constexpr guid value{ 0xEED221E6,0x6B64,0x5A38,{ 0x74,0xCA,0x0F,0xB2,0x87,0x86,0x57,0xC6 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass>
    {
        static constexpr guid value{ 0x34651197,0xBE9D,0x57AD,{ 0x44,0x25,0x30,0x73,0x3B,0x9E,0x8D,0x21 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass>
    {
        static constexpr guid value{ 0x7F8A86A5,0xEFF1,0x535A,{ 0x5D,0xDD,0x44,0x1B,0xC2,0x03,0xAD,0x57 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass>
    {
        static constexpr guid value{ 0xF873EE48,0x39E3,0x561A,{ 0x4A,0x97,0xC2,0x46,0x97,0x1E,0xD3,0x90 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent>
    {
        static constexpr guid value{ 0xBE330A24,0x4D9E,0x5819,{ 0x78,0xA3,0xF0,0xA1,0xCD,0xB9,0x81,0x30 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild>
    {
        static constexpr guid value{ 0x8743B4DE,0x686A,0x5C91,{ 0x5B,0xBA,0xC2,0xF3,0x28,0xE3,0xA2,0x5C } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass>
    {
        static constexpr guid value{ 0x2D30C215,0x76E6,0x54F6,{ 0x75,0x75,0xEA,0x22,0x6A,0xD4,0xC5,0xB7 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass>
    {
        static constexpr guid value{ 0x61FCBA08,0xEE84,0x5F1B,{ 0x45,0xB1,0xB7,0xE7,0xD4,0x60,0x10,0xCD } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass>
    {
        static constexpr guid value{ 0x84262F37,0xE307,0x5BCB,{ 0x78,0x09,0x64,0xF4,0xDA,0x6C,0x2C,0x6D } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPeopleClass>
    {
        static constexpr guid value{ 0xF620351E,0x8956,0x56E4,{ 0x6E,0x6C,0x86,0x2F,0x7E,0xC1,0x34,0xBD } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPhotosClass>
    {
        static constexpr guid value{ 0x107DE6EA,0x8AC8,0x592C,{ 0x4B,0xFE,0x39,0x5E,0x31,0xE3,0x71,0x43 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileContentClass>
    {
        static constexpr guid value{ 0x76CF423C,0x68C1,0x5D30,{ 0x7F,0xB2,0x83,0x3B,0xF6,0x3B,0xF3,0x6F } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass>
    {
        static constexpr guid value{ 0x2F65F4B6,0x2AE1,0x5737,{ 0x6A,0x71,0x18,0x42,0x03,0x1D,0x66,0x1F } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass>
    {
        static constexpr guid value{ 0x40FD897C,0x7CF0,0x5A89,{ 0x5B,0xA9,0xD5,0xE6,0xDA,0xAD,0x34,0x13 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastActions>
    {
        static constexpr guid value{ 0x0C7EC622,0xCEF9,0x5BFE,{ 0x5B,0xB5,0x82,0x8E,0xA7,0xB5,0x30,0x87 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass>
    {
        static constexpr guid value{ 0x2A7A5221,0xE75C,0x5D22,{ 0x5A,0x21,0x18,0x39,0x5B,0xAA,0xF3,0xE1 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass>
    {
        static constexpr guid value{ 0xBCFCBC3C,0xE04B,0x5D4E,{ 0x7B,0x28,0x96,0xC6,0x41,0xA7,0xC3,0x33 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass>
    {
        static constexpr guid value{ 0x40634894,0x5564,0x5C0E,{ 0x5E,0xAC,0x95,0x84,0xFE,0xE0,0x26,0xB2 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild>
    {
        static constexpr guid value{ 0xF9CE04EB,0x91BD,0x5AC2,{ 0x7E,0xD2,0x4D,0x39,0x42,0x58,0x05,0x31 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass>
    {
        static constexpr guid value{ 0x6A6FA47A,0x9761,0x5EBD,{ 0x59,0xD3,0xF7,0x4D,0x69,0x56,0xF0,0xD7 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass>
    {
        static constexpr guid value{ 0x6D6DFCD1,0x2B0A,0x5EB7,{ 0x58,0x9F,0xBC,0x5B,0x23,0x05,0x75,0x73 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastButton>
    {
        static constexpr guid value{ 0xB5645C00,0x254E,0x5754,{ 0x7C,0x64,0x11,0xA5,0x19,0xE6,0x3D,0x0E } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass>
    {
        static constexpr guid value{ 0x057E424A,0xFAA6,0x5D70,{ 0x67,0x8E,0xFA,0xF5,0x33,0x82,0xF7,0x10 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissClass>
    {
        static constexpr guid value{ 0xCA07CF6E,0x9135,0x5C99,{ 0x54,0x12,0xDA,0xC4,0x84,0x21,0xB5,0x65 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissFactory>
    {
        static constexpr guid value{ 0xCD3DE9F9,0x7009,0x50CB,{ 0x44,0x30,0xEE,0x10,0x05,0x90,0x73,0xC8 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastButtonFactory>
    {
        static constexpr guid value{ 0x3241112C,0xF05E,0x5429,{ 0x45,0xB4,0x5D,0x9E,0x02,0x13,0x2E,0x79 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass>
    {
        static constexpr guid value{ 0x98767617,0xC591,0x5D49,{ 0x6B,0x7D,0x3E,0xE8,0xD4,0x53,0x71,0x88 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeFactory>
    {
        static constexpr guid value{ 0x450BE3D8,0x808B,0x5AE5,{ 0x62,0x27,0x26,0x69,0x5F,0xAC,0x16,0x17 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastContentClass>
    {
        static constexpr guid value{ 0x6AA3B777,0xFDAF,0x596B,{ 0x7F,0x6B,0x42,0x79,0x86,0x0A,0x17,0x60 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass>
    {
        static constexpr guid value{ 0xCE17CFCC,0xE9EC,0x5F5F,{ 0x7B,0xC6,0xE9,0x5C,0xA5,0x50,0x3C,0x59 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemFactory>
    {
        static constexpr guid value{ 0xBEFA0245,0xC61A,0x5653,{ 0x7E,0xE5,0x63,0x7A,0x6C,0xA3,0xC1,0xE9 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass>
    {
        static constexpr guid value{ 0xC3AB0FD9,0xE0B4,0x5C35,{ 0x62,0x6B,0x79,0x5B,0x81,0xF9,0x01,0x4D } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass>
    {
        static constexpr guid value{ 0x648FA324,0xB68D,0x5842,{ 0x78,0x8C,0x1F,0x46,0x55,0x85,0x4A,0x06 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastHeaderFactory>
    {
        static constexpr guid value{ 0xD5FAFF14,0x9B4D,0x5595,{ 0x6F,0xF0,0x07,0x51,0x81,0x30,0x7A,0x5F } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastInput>
    {
        static constexpr guid value{ 0xA4F8891A,0xE17D,0x5F0F,{ 0x58,0xCB,0xF9,0x9D,0x48,0x86,0x6C,0x4A } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass>
    {
        static constexpr guid value{ 0xC38ADAB3,0x04D2,0x57C2,{ 0x4A,0x5E,0xF1,0xAD,0x99,0xB6,0x98,0x9C } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass>
    {
        static constexpr guid value{ 0x4DEB6B26,0x4557,0x566F,{ 0x41,0x9F,0x0F,0xBB,0x89,0xC9,0x6D,0xF5 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxFactory>
    {
        static constexpr guid value{ 0x773E8C10,0xDD78,0x56DB,{ 0x63,0xF9,0x38,0xB6,0x01,0x57,0xDC,0xB0 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass>
    {
        static constexpr guid value{ 0x06F5F7A8,0x6411,0x54B6,{ 0x6A,0x26,0xE4,0x2D,0x5A,0xD1,0x4B,0x7A } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemFactory>
    {
        static constexpr guid value{ 0x33741AF5,0x1DDC,0x5A90,{ 0x4D,0xDC,0xFB,0x7B,0x4F,0x45,0x36,0x4A } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass>
    {
        static constexpr guid value{ 0xBE5070EB,0x3554,0x5E03,{ 0x6F,0x63,0x62,0x41,0x18,0x41,0x70,0xD5 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass>
    {
        static constexpr guid value{ 0x0CA29B60,0x6158,0x5327,{ 0x65,0x94,0x23,0x24,0x8B,0x77,0x13,0x4B } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass>
    {
        static constexpr guid value{ 0x4C3C7F5E,0xA8C0,0x5EE8,{ 0x60,0x45,0x4B,0x14,0x51,0x30,0x88,0x5D } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxFactory>
    {
        static constexpr guid value{ 0x868F4AE3,0x98D8,0x5863,{ 0x6E,0x84,0x04,0xB0,0xE3,0xD8,0x88,0xA2 } };
    };
    template <> struct guid_storage<Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass>
    {
        static constexpr guid value{ 0x54A8DF81,0xBD28,0x5D91,{ 0x47,0xF2,0x59,0x68,0xC8,0xE9,0x92,0xCE } };
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::AdaptiveGroup>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IAdaptiveGroupClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::AdaptiveImage>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBar>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroup>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::AdaptiveText>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphContent>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::BadgeNumericContent>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImage>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IBaseImage;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TileBasicText>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TileBinding>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentAdaptive>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentContact>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentIconic>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentPeople>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPeopleClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TileBindingContentPhotos>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPhotosClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TileContent>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::ITileContentClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TilePeekImage>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::TileVisual>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastActionsCustom>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastActionsSnoozeAndDismiss>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastActions;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastAudio>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastBindingGeneric>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastBindingShoulderTap>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastButton>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastButtonDismiss>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastButtonSnooze>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastContent>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastContentClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastContextMenuItem>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogo>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAttributionText>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IBaseText;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastGenericHeroImage>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IBaseImage;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastHeader>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastPeople>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBox>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBoxItem>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastShoulderTapImage>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastSpriteSheet>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastTextBox>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass;
    };
    template <> struct default_interface<Microsoft::Toolkit::Uwp::Notifications::ToastVisual>
    {
        using type = Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass;
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveChild>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveGroupClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Children(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_HintAlign(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintCrop(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintRemoveMargin(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintAlign(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintCrop(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintRemoveMargin(void*) noexcept = 0;
            virtual int32_t WINRT_CALL ToString(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Bindings(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Status(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Title(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Value(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_ValueStringOverride(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Status(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Title(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Value(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_ValueStringOverride(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_IsIndeterminate(bool*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Value(double*) noexcept = 0;
            virtual int32_t WINRT_CALL put_IsIndeterminate(bool) noexcept = 0;
            virtual int32_t WINRT_CALL put_Value(double) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL FromValue(double, void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Indeterminate(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Children(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintTextStacking(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintWeight(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintTextStacking(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintWeight(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Bindings(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintAlign(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintMaxLines(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintMinLines(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintStyle(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintWrap(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Language(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Text(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintAlign(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintMaxLines(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintMinLines(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintStyle(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintWrap(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Language(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Text(void*) noexcept = 0;
            virtual int32_t WINRT_CALL ToString(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Glyph(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Glyph(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL ToString(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentFactory>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateBadgeGlyphContent(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Number(uint32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Number(uint32_t) noexcept = 0;
            virtual int32_t WINRT_CALL ToString(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentFactory>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateBadgeNumericContent(uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IBaseImage>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Source(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Source(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_AlternateText(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_AlternateText(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_AddImageQuery(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_AddImageQuery(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IBaseText>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Text(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Text(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Language(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Language(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::INotificationContent>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL GetContent(void**) noexcept = 0;
            virtual int32_t WINRT_CALL GetXml(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_HintCrop(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintOverlay(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintCrop(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintOverlay(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Lang(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Text(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Lang(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Text(void*) noexcept = 0;
            virtual int32_t WINRT_CALL ToString(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_AddImageQuery(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Arguments(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_BaseUri(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Branding(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Content(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_ContentId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_DisplayName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Language(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_AddImageQuery(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Arguments(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_BaseUri(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Branding(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_ContentId(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Content(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_DisplayName(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Language(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_BackgroundImage(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Children(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_PeekImage(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_TextStacking(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL put_BackgroundImage(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_PeekImage(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_TextStacking(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Image(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Text(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Image(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Text(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Icon(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Icon(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPeopleClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Images(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPhotosClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Images(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileContentClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Visual(void**) noexcept = 0;
            virtual int32_t WINRT_CALL GetContent(void**) noexcept = 0;
            virtual int32_t WINRT_CALL GetXml(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Visual(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_HintCrop(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintOverlay(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintCrop(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintOverlay(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_AddImageQuery(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Arguments(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_BaseUri(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Branding(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_ContentId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_DisplayName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Language(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_LockDetailedStatus1(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_LockDetailedStatus2(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_LockDetailedStatus3(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_TileLarge(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_TileMedium(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_TileSmall(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_TileWide(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_AddImageQuery(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Arguments(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_BaseUri(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Branding(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_ContentId(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_DisplayName(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Language(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_LockDetailedStatus1(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_LockDetailedStatus2(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_LockDetailedStatus3(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_TileLarge(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_TileMedium(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_TileSmall(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_TileWide(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastActions>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_ContextMenuItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Buttons(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Inputs(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_AfterActivationBehavior(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_ProtocolActivationTargetApplicationPfn(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_AfterActivationBehavior(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_ProtocolActivationTargetApplicationPfn(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Loop(bool*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Silent(bool*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Src(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Loop(bool) noexcept = 0;
            virtual int32_t WINRT_CALL put_Silent(bool) noexcept = 0;
            virtual int32_t WINRT_CALL put_Src(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_AddImageQuery(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_AppLogoOverride(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Attribution(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_BaseUri(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Children(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_HeroImage(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Language(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_AddImageQuery(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_AppLogoOverride(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Attribution(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_BaseUri(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_HeroImage(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Language(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_AddImageQuery(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_BaseUri(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Image(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Language(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_AddImageQuery(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_BaseUri(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Image(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Language(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastButton>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_ImageUri(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_ImageUri(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintActionId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintActionId(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_ActivationOptions(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_ActivationType(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Arguments(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Content(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_TextBoxId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_ActivationOptions(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_ActivationType(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_TextBoxId(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_CustomContent(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissFactory>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateToastButtonDismiss(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastButtonFactory>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateToastButton(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_CustomContent(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_SelectionBoxId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_SelectionBoxId(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeFactory>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateToastButtonSnooze(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastContentClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Actions(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_ActivationOptions(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_ActivationType(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_AdditionalProperties(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Audio(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_DisplayTimestamp(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Duration(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Header(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintPeople(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintToastId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Launch(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Scenario(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Visual(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Actions(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_ActivationOptions(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_ActivationType(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_Audio(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_DisplayTimestamp(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Duration(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_Header(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintPeople(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintToastId(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Launch(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Scenario(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_Visual(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_ActivationOptions(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_ActivationType(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Arguments(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Content(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_HintActionId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_ActivationOptions(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_ActivationType(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintActionId(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemFactory>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateToastContextMenuItem(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_HintCrop(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL put_HintCrop(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_ActivationOptions(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_ActivationType(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Arguments(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Id(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Title(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_ActivationOptions(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_ActivationType(int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL put_Arguments(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Id(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Title(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastHeaderFactory>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateToastHeader(void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastInput>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_EmailAddress(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_PhoneNumber(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_RemoteId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_EmailAddress(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_PhoneNumber(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_RemoteId(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_DefaultSelectionBoxItemId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Id(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Items(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Title(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_DefaultSelectionBoxItemId(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Title(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxFactory>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateToastSelectionBox(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Content(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Id(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemFactory>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateToastSelectionBoxItem(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_SpriteSheet(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_SpriteSheet(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Fps(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_FrameHeight(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Source(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_StartingFrame(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Fps(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_FrameHeight(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Source(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_StartingFrame(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_DefaultInput(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Id(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_PlaceholderContent(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Title(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_DefaultInput(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_PlaceholderContent(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Title(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxFactory>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateToastTextBox(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_AddImageQuery(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_BaseUri(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_BindingGeneric(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_BindingShoulderTap(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Language(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_AddImageQuery(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_BaseUri(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_BindingGeneric(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_BindingShoulderTap(void*) noexcept = 0;
            virtual int32_t WINRT_CALL put_Language(void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveChild
    {
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveChild>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveChild<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveGroupClass
    {
        Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroup> Children() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveGroupClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveGroupClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveImageClass
    {
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageAlign HintAlign() const;
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageCrop HintCrop() const;
        Windows::Foundation::IReference<bool> HintRemoveMargin() const;
        void HintAlign(Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageAlign const& value) const;
        void HintCrop(Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageCrop const& value) const;
        void HintRemoveMargin(Windows::Foundation::IReference<bool> const& value) const;
        hstring ToString() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveImageClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarClass
    {
        Windows::Foundation::Collections::IMap<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarBindableProperty, hstring> Bindings() const;
        hstring Status() const;
        hstring Title() const;
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue Value() const;
        hstring ValueStringOverride() const;
        void Status(param::hstring const& value) const;
        void Title(param::hstring const& value) const;
        void Value(Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue const& value) const;
        void ValueStringOverride(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarValueClass
    {
        bool IsIndeterminate() const;
        double Value() const;
        void IsIndeterminate(bool value) const;
        void Value(double value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarValueClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarValueStatic
    {
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue FromValue(double d) const;
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue Indeterminate() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarValueStatic<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveSubgroupChild
    {
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveSubgroupChild<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveSubgroupClass
    {
        Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild> Children() const;
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroupTextStacking HintTextStacking() const;
        Windows::Foundation::IReference<int32_t> HintWeight() const;
        void HintTextStacking(Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroupTextStacking const& value) const;
        void HintWeight(Windows::Foundation::IReference<int32_t> const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveSubgroupClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass
    {
        Windows::Foundation::Collections::IMap<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextBindableProperty, hstring> Bindings() const;
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextAlign HintAlign() const;
        Windows::Foundation::IReference<int32_t> HintMaxLines() const;
        Windows::Foundation::IReference<int32_t> HintMinLines() const;
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextStyle HintStyle() const;
        Windows::Foundation::IReference<bool> HintWrap() const;
        hstring Language() const;
        hstring Text() const;
        void HintAlign(Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextAlign const& value) const;
        void HintMaxLines(Windows::Foundation::IReference<int32_t> const& value) const;
        void HintMinLines(Windows::Foundation::IReference<int32_t> const& value) const;
        void HintStyle(Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextStyle const& value) const;
        void HintWrap(Windows::Foundation::IReference<bool> const& value) const;
        void Language(param::hstring const& value) const;
        void Text(param::hstring const& value) const;
        hstring ToString() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeGlyphContentClass
    {
        Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue Glyph() const;
        void Glyph(Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue const& value) const;
        hstring ToString() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeGlyphContentClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeGlyphContentFactory
    {
        Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphContent CreateBadgeGlyphContent(Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue const& glyph) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentFactory>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeGlyphContentFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeNumericContentClass
    {
        uint32_t Number() const;
        void Number(uint32_t value) const;
        hstring ToString() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeNumericContentClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeNumericContentFactory
    {
        Microsoft::Toolkit::Uwp::Notifications::BadgeNumericContent CreateBadgeNumericContent(uint32_t number) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentFactory>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeNumericContentFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IBaseImage
    {
        hstring Source() const;
        void Source(param::hstring const& value) const;
        hstring AlternateText() const;
        void AlternateText(param::hstring const& value) const;
        Windows::Foundation::IReference<bool> AddImageQuery() const;
        void AddImageQuery(Windows::Foundation::IReference<bool> const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IBaseImage>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IBaseImage<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IBaseText
    {
        hstring Text() const;
        void Text(param::hstring const& value) const;
        hstring Language() const;
        void Language(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IBaseText>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IBaseText<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_INotificationContent
    {
        hstring GetContent() const;
        Windows::Data::Xml::Dom::XmlDocument GetXml() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::INotificationContent>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_INotificationContent<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileBackgroundImageClass
    {
        Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImageCrop HintCrop() const;
        Windows::Foundation::IReference<int32_t> HintOverlay() const;
        void HintCrop(Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImageCrop const& value) const;
        void HintOverlay(Windows::Foundation::IReference<int32_t> const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileBackgroundImageClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileBasicTextClass
    {
        hstring Lang() const;
        hstring Text() const;
        void Lang(param::hstring const& value) const;
        void Text(param::hstring const& value) const;
        hstring ToString() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileBasicTextClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass
    {
        Windows::Foundation::IReference<bool> AddImageQuery() const;
        hstring Arguments() const;
        Windows::Foundation::Uri BaseUri() const;
        Microsoft::Toolkit::Uwp::Notifications::TileBranding Branding() const;
        Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent Content() const;
        hstring ContentId() const;
        hstring DisplayName() const;
        hstring Language() const;
        void AddImageQuery(Windows::Foundation::IReference<bool> const& value) const;
        void Arguments(param::hstring const& value) const;
        void BaseUri(Windows::Foundation::Uri const& value) const;
        void Branding(Microsoft::Toolkit::Uwp::Notifications::TileBranding const& value) const;
        void ContentId(param::hstring const& value) const;
        void Content(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent const& value) const;
        void DisplayName(param::hstring const& value) const;
        void Language(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContent
    {
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContent<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentAdaptiveChild
    {
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentAdaptiveChild<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentAdaptiveClass
    {
        Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImage BackgroundImage() const;
        Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild> Children() const;
        Microsoft::Toolkit::Uwp::Notifications::TilePeekImage PeekImage() const;
        Microsoft::Toolkit::Uwp::Notifications::TileTextStacking TextStacking() const;
        void BackgroundImage(Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImage const& value) const;
        void PeekImage(Microsoft::Toolkit::Uwp::Notifications::TilePeekImage const& value) const;
        void TextStacking(Microsoft::Toolkit::Uwp::Notifications::TileTextStacking const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentAdaptiveClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentContactClass
    {
        Microsoft::Toolkit::Uwp::Notifications::TileBasicImage Image() const;
        Microsoft::Toolkit::Uwp::Notifications::TileBasicText Text() const;
        void Image(Microsoft::Toolkit::Uwp::Notifications::TileBasicImage const& value) const;
        void Text(Microsoft::Toolkit::Uwp::Notifications::TileBasicText const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentContactClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentIconicClass
    {
        Microsoft::Toolkit::Uwp::Notifications::TileBasicImage Icon() const;
        void Icon(Microsoft::Toolkit::Uwp::Notifications::TileBasicImage const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentIconicClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentPeopleClass
    {
        Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage> Images() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPeopleClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentPeopleClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentPhotosClass
    {
        Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage> Images() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPhotosClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentPhotosClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileContentClass
    {
        Microsoft::Toolkit::Uwp::Notifications::TileVisual Visual() const;
        hstring GetContent() const;
        Windows::Data::Xml::Dom::XmlDocument GetXml() const;
        void Visual(Microsoft::Toolkit::Uwp::Notifications::TileVisual const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileContentClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileContentClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITilePeekImageClass
    {
        Microsoft::Toolkit::Uwp::Notifications::TilePeekImageCrop HintCrop() const;
        Windows::Foundation::IReference<int32_t> HintOverlay() const;
        void HintCrop(Microsoft::Toolkit::Uwp::Notifications::TilePeekImageCrop const& value) const;
        void HintOverlay(Windows::Foundation::IReference<int32_t> const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITilePeekImageClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass
    {
        Windows::Foundation::IReference<bool> AddImageQuery() const;
        hstring Arguments() const;
        Windows::Foundation::Uri BaseUri() const;
        Microsoft::Toolkit::Uwp::Notifications::TileBranding Branding() const;
        hstring ContentId() const;
        hstring DisplayName() const;
        hstring Language() const;
        hstring LockDetailedStatus1() const;
        hstring LockDetailedStatus2() const;
        hstring LockDetailedStatus3() const;
        Microsoft::Toolkit::Uwp::Notifications::TileBinding TileLarge() const;
        Microsoft::Toolkit::Uwp::Notifications::TileBinding TileMedium() const;
        Microsoft::Toolkit::Uwp::Notifications::TileBinding TileSmall() const;
        Microsoft::Toolkit::Uwp::Notifications::TileBinding TileWide() const;
        void AddImageQuery(Windows::Foundation::IReference<bool> const& value) const;
        void Arguments(param::hstring const& value) const;
        void BaseUri(Windows::Foundation::Uri const& value) const;
        void Branding(Microsoft::Toolkit::Uwp::Notifications::TileBranding const& value) const;
        void ContentId(param::hstring const& value) const;
        void DisplayName(param::hstring const& value) const;
        void Language(param::hstring const& value) const;
        void LockDetailedStatus1(param::hstring const& value) const;
        void LockDetailedStatus2(param::hstring const& value) const;
        void LockDetailedStatus3(param::hstring const& value) const;
        void TileLarge(Microsoft::Toolkit::Uwp::Notifications::TileBinding const& value) const;
        void TileMedium(Microsoft::Toolkit::Uwp::Notifications::TileBinding const& value) const;
        void TileSmall(Microsoft::Toolkit::Uwp::Notifications::TileBinding const& value) const;
        void TileWide(Microsoft::Toolkit::Uwp::Notifications::TileBinding const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastActions
    {
        Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::ToastContextMenuItem> ContextMenuItems() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastActions>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastActions<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastActionsCustomClass
    {
        Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IToastButton> Buttons() const;
        Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IToastInput> Inputs() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastActionsCustomClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastActivationOptionsClass
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastAfterActivationBehavior AfterActivationBehavior() const;
        hstring ProtocolActivationTargetApplicationPfn() const;
        void AfterActivationBehavior(Microsoft::Toolkit::Uwp::Notifications::ToastAfterActivationBehavior const& value) const;
        void ProtocolActivationTargetApplicationPfn(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastActivationOptionsClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastAudioClass
    {
        bool Loop() const;
        bool Silent() const;
        Windows::Foundation::Uri Src() const;
        void Loop(bool value) const;
        void Silent(bool value) const;
        void Src(Windows::Foundation::Uri const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastAudioClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericChild
    {
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericChild<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass
    {
        Windows::Foundation::IReference<bool> AddImageQuery() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogo AppLogoOverride() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastGenericAttributionText Attribution() const;
        Windows::Foundation::Uri BaseUri() const;
        Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild> Children() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastGenericHeroImage HeroImage() const;
        hstring Language() const;
        void AddImageQuery(Windows::Foundation::IReference<bool> const& value) const;
        void AppLogoOverride(Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogo const& value) const;
        void Attribution(Microsoft::Toolkit::Uwp::Notifications::ToastGenericAttributionText const& value) const;
        void BaseUri(Windows::Foundation::Uri const& value) const;
        void HeroImage(Microsoft::Toolkit::Uwp::Notifications::ToastGenericHeroImage const& value) const;
        void Language(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingShoulderTapClass
    {
        Windows::Foundation::IReference<bool> AddImageQuery() const;
        Windows::Foundation::Uri BaseUri() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastShoulderTapImage Image() const;
        hstring Language() const;
        void AddImageQuery(Windows::Foundation::IReference<bool> const& value) const;
        void BaseUri(Windows::Foundation::Uri const& value) const;
        void Image(Microsoft::Toolkit::Uwp::Notifications::ToastShoulderTapImage const& value) const;
        void Language(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingShoulderTapClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastButton
    {
        hstring ImageUri() const;
        void ImageUri(param::hstring const& value) const;
        hstring HintActionId() const;
        void HintActionId(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastButton>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonClass
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions ActivationOptions() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationType ActivationType() const;
        hstring Arguments() const;
        hstring Content() const;
        hstring TextBoxId() const;
        void ActivationOptions(Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const& value) const;
        void ActivationType(Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const& value) const;
        void TextBoxId(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonDismissClass
    {
        hstring CustomContent() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonDismissClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonDismissFactory
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastButtonDismiss CreateToastButtonDismiss(param::hstring const& customContent) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissFactory>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonDismissFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonFactory
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastButton CreateToastButton(param::hstring const& content, param::hstring const& arguments) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonSnoozeClass
    {
        hstring CustomContent() const;
        hstring SelectionBoxId() const;
        void SelectionBoxId(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonSnoozeClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonSnoozeFactory
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastButtonSnooze CreateToastButtonSnooze(param::hstring const& customContent) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeFactory>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonSnoozeFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass
    {
        Microsoft::Toolkit::Uwp::Notifications::IToastActions Actions() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions ActivationOptions() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationType ActivationType() const;
        Windows::Foundation::Collections::IMap<hstring, hstring> AdditionalProperties() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastAudio Audio() const;
        Windows::Foundation::IReference<Windows::Foundation::DateTime> DisplayTimestamp() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastDuration Duration() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastHeader Header() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastPeople HintPeople() const;
        hstring HintToastId() const;
        hstring Launch() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastScenario Scenario() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastVisual Visual() const;
        void Actions(Microsoft::Toolkit::Uwp::Notifications::IToastActions const& value) const;
        void ActivationOptions(Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const& value) const;
        void ActivationType(Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const& value) const;
        void Audio(Microsoft::Toolkit::Uwp::Notifications::ToastAudio const& value) const;
        void DisplayTimestamp(Windows::Foundation::IReference<Windows::Foundation::DateTime> const& value) const;
        void Duration(Microsoft::Toolkit::Uwp::Notifications::ToastDuration const& value) const;
        void Header(Microsoft::Toolkit::Uwp::Notifications::ToastHeader const& value) const;
        void HintPeople(Microsoft::Toolkit::Uwp::Notifications::ToastPeople const& value) const;
        void HintToastId(param::hstring const& value) const;
        void Launch(param::hstring const& value) const;
        void Scenario(Microsoft::Toolkit::Uwp::Notifications::ToastScenario const& value) const;
        void Visual(Microsoft::Toolkit::Uwp::Notifications::ToastVisual const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastContentClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemClass
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions ActivationOptions() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationType ActivationType() const;
        hstring Arguments() const;
        hstring Content() const;
        hstring HintActionId() const;
        void ActivationOptions(Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const& value) const;
        void ActivationType(Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const& value) const;
        void HintActionId(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemFactory
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastContextMenuItem CreateToastContextMenuItem(param::hstring const& content, param::hstring const& arguments) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemFactory>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastGenericAppLogoClass
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogoCrop HintCrop() const;
        void HintCrop(Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogoCrop const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastGenericAppLogoClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions ActivationOptions() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationType ActivationType() const;
        hstring Arguments() const;
        hstring Id() const;
        hstring Title() const;
        void ActivationOptions(Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const& value) const;
        void ActivationType(Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const& value) const;
        void Arguments(param::hstring const& value) const;
        void Id(param::hstring const& value) const;
        void Title(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderFactory
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastHeader CreateToastHeader(param::hstring const& id, param::hstring const& title, param::hstring const& arguments) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastHeaderFactory>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastInput
    {
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastInput>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastInput<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastPeopleClass
    {
        hstring EmailAddress() const;
        hstring PhoneNumber() const;
        hstring RemoteId() const;
        void EmailAddress(param::hstring const& value) const;
        void PhoneNumber(param::hstring const& value) const;
        void RemoteId(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastPeopleClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxClass
    {
        hstring DefaultSelectionBoxItemId() const;
        hstring Id() const;
        Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBoxItem> Items() const;
        hstring Title() const;
        void DefaultSelectionBoxItemId(param::hstring const& value) const;
        void Title(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxFactory
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBox CreateToastSelectionBox(param::hstring const& id) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxFactory>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxItemClass
    {
        hstring Content() const;
        hstring Id() const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxItemClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxItemFactory
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBoxItem CreateToastSelectionBoxItem(param::hstring const& id, param::hstring const& content) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemFactory>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastShoulderTapImageClass
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastSpriteSheet SpriteSheet() const;
        void SpriteSheet(Microsoft::Toolkit::Uwp::Notifications::ToastSpriteSheet const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastShoulderTapImageClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastSpriteSheetClass
    {
        Windows::Foundation::IReference<uint32_t> Fps() const;
        Windows::Foundation::IReference<uint32_t> FrameHeight() const;
        hstring Source() const;
        Windows::Foundation::IReference<uint32_t> StartingFrame() const;
        void Fps(Windows::Foundation::IReference<uint32_t> const& value) const;
        void FrameHeight(Windows::Foundation::IReference<uint32_t> const& value) const;
        void Source(param::hstring const& value) const;
        void StartingFrame(Windows::Foundation::IReference<uint32_t> const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastSpriteSheetClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxClass
    {
        hstring DefaultInput() const;
        hstring Id() const;
        hstring PlaceholderContent() const;
        hstring Title() const;
        void DefaultInput(param::hstring const& value) const;
        void PlaceholderContent(param::hstring const& value) const;
        void Title(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxClass<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxFactory
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastTextBox CreateToastTextBox(param::hstring const& id) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxFactory>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass
    {
        Windows::Foundation::IReference<bool> AddImageQuery() const;
        Windows::Foundation::Uri BaseUri() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastBindingGeneric BindingGeneric() const;
        Microsoft::Toolkit::Uwp::Notifications::ToastBindingShoulderTap BindingShoulderTap() const;
        hstring Language() const;
        void AddImageQuery(Windows::Foundation::IReference<bool> const& value) const;
        void BaseUri(Windows::Foundation::Uri const& value) const;
        void BindingGeneric(Microsoft::Toolkit::Uwp::Notifications::ToastBindingGeneric const& value) const;
        void BindingShoulderTap(Microsoft::Toolkit::Uwp::Notifications::ToastBindingShoulderTap const& value) const;
        void Language(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass>
    {
        template <typename D> using type = consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass<D>;
    };
}
#endif
