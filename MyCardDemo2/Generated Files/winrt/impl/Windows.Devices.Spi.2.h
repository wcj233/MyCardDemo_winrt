// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_Windows_Devices_Spi_2_H
#define WINRT_Windows_Devices_Spi_2_H
#include "winrt/impl/Windows.Devices.Spi.Provider.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/Windows.Devices.Spi.1.h"
namespace winrt::Windows::Devices::Spi
{
    struct WINRT_EBO SpiBusInfo : Windows::Devices::Spi::ISpiBusInfo
    {
        SpiBusInfo(std::nullptr_t) noexcept {}
        SpiBusInfo(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Spi::ISpiBusInfo(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_EBO SpiConnectionSettings : Windows::Devices::Spi::ISpiConnectionSettings
    {
        SpiConnectionSettings(std::nullptr_t) noexcept {}
        SpiConnectionSettings(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Spi::ISpiConnectionSettings(ptr, take_ownership_from_abi) {}
        SpiConnectionSettings(int32_t chipSelectLine);
    };
    struct WINRT_EBO SpiController : Windows::Devices::Spi::ISpiController
    {
        SpiController(std::nullptr_t) noexcept {}
        SpiController(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Spi::ISpiController(ptr, take_ownership_from_abi) {}
        static Windows::Foundation::IAsyncOperation<Windows::Devices::Spi::SpiController> GetDefaultAsync();
        static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Spi::SpiController>> GetControllersAsync(Windows::Devices::Spi::Provider::ISpiProvider const& provider);
    };
    struct WINRT_EBO SpiDevice : Windows::Devices::Spi::ISpiDevice
    {
        SpiDevice(std::nullptr_t) noexcept {}
        SpiDevice(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Devices::Spi::ISpiDevice(ptr, take_ownership_from_abi) {}
        static hstring GetDeviceSelector();
        static hstring GetDeviceSelector(param::hstring const& friendlyName);
        static Windows::Devices::Spi::SpiBusInfo GetBusInfo(param::hstring const& busId);
        static Windows::Foundation::IAsyncOperation<Windows::Devices::Spi::SpiDevice> FromIdAsync(param::hstring const& busId, Windows::Devices::Spi::SpiConnectionSettings const& settings);
    };
}
#endif
