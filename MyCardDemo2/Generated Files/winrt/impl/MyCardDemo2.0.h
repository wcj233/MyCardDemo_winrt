// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_MyCardDemo2_0_H
#define WINRT_MyCardDemo2_0_H
namespace winrt::Windows::Data::Json
{
    struct JsonObject;
}
namespace winrt::Windows::Foundation
{
    template <typename T> struct EventHandler;
    struct EventRegistrationToken;
}
namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct IObservableVector;
}
namespace winrt::Windows::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
namespace winrt::MyCardDemo2
{
    struct IAddCardContentPage;
    struct ICardListViewModel;
    struct ICardModel;
    struct ICardViewModel;
    struct IMainPage;
    struct IMyConverter;
    struct ISingleCardUserControl;
    struct AddCardContentPage;
    struct CardListViewModel;
    struct CardModel;
    struct CardViewModel;
    struct MainPage;
    struct MyConverter;
    struct SingleCardUserControl;
    struct XamlMetaDataProvider;
}
namespace winrt::impl
{
    template <> struct category<MyCardDemo2::IAddCardContentPage>
    {
        using type = interface_category;
    };
    template <> struct category<MyCardDemo2::ICardListViewModel>
    {
        using type = interface_category;
    };
    template <> struct category<MyCardDemo2::ICardModel>
    {
        using type = interface_category;
    };
    template <> struct category<MyCardDemo2::ICardViewModel>
    {
        using type = interface_category;
    };
    template <> struct category<MyCardDemo2::IMainPage>
    {
        using type = interface_category;
    };
    template <> struct category<MyCardDemo2::IMyConverter>
    {
        using type = interface_category;
    };
    template <> struct category<MyCardDemo2::ISingleCardUserControl>
    {
        using type = interface_category;
    };
    template <> struct category<MyCardDemo2::AddCardContentPage>
    {
        using type = class_category;
    };
    template <> struct category<MyCardDemo2::CardListViewModel>
    {
        using type = class_category;
    };
    template <> struct category<MyCardDemo2::CardModel>
    {
        using type = class_category;
    };
    template <> struct category<MyCardDemo2::CardViewModel>
    {
        using type = class_category;
    };
    template <> struct category<MyCardDemo2::MainPage>
    {
        using type = class_category;
    };
    template <> struct category<MyCardDemo2::MyConverter>
    {
        using type = class_category;
    };
    template <> struct category<MyCardDemo2::SingleCardUserControl>
    {
        using type = class_category;
    };
    template <> struct category<MyCardDemo2::XamlMetaDataProvider>
    {
        using type = class_category;
    };
    template <> struct name<MyCardDemo2::IAddCardContentPage>
    {
        static constexpr auto & value{ L"MyCardDemo2.IAddCardContentPage" };
    };
    template <> struct name<MyCardDemo2::ICardListViewModel>
    {
        static constexpr auto & value{ L"MyCardDemo2.ICardListViewModel" };
    };
    template <> struct name<MyCardDemo2::ICardModel>
    {
        static constexpr auto & value{ L"MyCardDemo2.ICardModel" };
    };
    template <> struct name<MyCardDemo2::ICardViewModel>
    {
        static constexpr auto & value{ L"MyCardDemo2.ICardViewModel" };
    };
    template <> struct name<MyCardDemo2::IMainPage>
    {
        static constexpr auto & value{ L"MyCardDemo2.IMainPage" };
    };
    template <> struct name<MyCardDemo2::IMyConverter>
    {
        static constexpr auto & value{ L"MyCardDemo2.IMyConverter" };
    };
    template <> struct name<MyCardDemo2::ISingleCardUserControl>
    {
        static constexpr auto & value{ L"MyCardDemo2.ISingleCardUserControl" };
    };
    template <> struct name<MyCardDemo2::AddCardContentPage>
    {
        static constexpr auto & value{ L"MyCardDemo2.AddCardContentPage" };
    };
    template <> struct name<MyCardDemo2::CardListViewModel>
    {
        static constexpr auto & value{ L"MyCardDemo2.CardListViewModel" };
    };
    template <> struct name<MyCardDemo2::CardModel>
    {
        static constexpr auto & value{ L"MyCardDemo2.CardModel" };
    };
    template <> struct name<MyCardDemo2::CardViewModel>
    {
        static constexpr auto & value{ L"MyCardDemo2.CardViewModel" };
    };
    template <> struct name<MyCardDemo2::MainPage>
    {
        static constexpr auto & value{ L"MyCardDemo2.MainPage" };
    };
    template <> struct name<MyCardDemo2::MyConverter>
    {
        static constexpr auto & value{ L"MyCardDemo2.MyConverter" };
    };
    template <> struct name<MyCardDemo2::SingleCardUserControl>
    {
        static constexpr auto & value{ L"MyCardDemo2.SingleCardUserControl" };
    };
    template <> struct name<MyCardDemo2::XamlMetaDataProvider>
    {
        static constexpr auto & value{ L"MyCardDemo2.XamlMetaDataProvider" };
    };
    template <> struct guid_storage<MyCardDemo2::IAddCardContentPage>
    {
        static constexpr guid value{ 0x99DE4CAF,0xA706,0x5468,{ 0xAB,0x17,0x3E,0xAE,0x9C,0x38,0x02,0x90 } };
    };
    template <> struct guid_storage<MyCardDemo2::ICardListViewModel>
    {
        static constexpr guid value{ 0xB39E24AC,0x691D,0x5300,{ 0xA7,0xFA,0x10,0x6E,0xCE,0x2B,0xD8,0xD0 } };
    };
    template <> struct guid_storage<MyCardDemo2::ICardModel>
    {
        static constexpr guid value{ 0x5EE072E3,0x3B10,0x531D,{ 0xAD,0xB8,0x28,0xA5,0x07,0xB3,0x33,0xA3 } };
    };
    template <> struct guid_storage<MyCardDemo2::ICardViewModel>
    {
        static constexpr guid value{ 0xD7D7F3DB,0x53CE,0x5D83,{ 0xAC,0xAD,0xB1,0x75,0x4F,0x23,0x13,0x48 } };
    };
    template <> struct guid_storage<MyCardDemo2::IMainPage>
    {
        static constexpr guid value{ 0x054D005E,0xAF7A,0x59BD,{ 0x84,0xE8,0xC4,0x6D,0xEF,0x8C,0x47,0x0F } };
    };
    template <> struct guid_storage<MyCardDemo2::IMyConverter>
    {
        static constexpr guid value{ 0x1A809D4B,0xAB43,0x584C,{ 0x82,0xD5,0xB2,0x38,0x41,0x83,0x20,0xAF } };
    };
    template <> struct guid_storage<MyCardDemo2::ISingleCardUserControl>
    {
        static constexpr guid value{ 0x6CB5393F,0x2BF2,0x5A29,{ 0xB1,0x16,0xCD,0x31,0x2D,0xAB,0xF0,0x24 } };
    };
    template <> struct default_interface<MyCardDemo2::AddCardContentPage>
    {
        using type = MyCardDemo2::IAddCardContentPage;
    };
    template <> struct default_interface<MyCardDemo2::CardListViewModel>
    {
        using type = MyCardDemo2::ICardListViewModel;
    };
    template <> struct default_interface<MyCardDemo2::CardModel>
    {
        using type = MyCardDemo2::ICardModel;
    };
    template <> struct default_interface<MyCardDemo2::CardViewModel>
    {
        using type = MyCardDemo2::ICardViewModel;
    };
    template <> struct default_interface<MyCardDemo2::MainPage>
    {
        using type = MyCardDemo2::IMainPage;
    };
    template <> struct default_interface<MyCardDemo2::MyConverter>
    {
        using type = MyCardDemo2::IMyConverter;
    };
    template <> struct default_interface<MyCardDemo2::SingleCardUserControl>
    {
        using type = MyCardDemo2::ISingleCardUserControl;
    };
    template <> struct default_interface<MyCardDemo2::XamlMetaDataProvider>
    {
        using type = Windows::UI::Xaml::Markup::IXamlMetadataProvider;
    };
    template <> struct abi<MyCardDemo2::IAddCardContentPage>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_AddCardTitleVM(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_AddCardTitleVM(void*) noexcept = 0;
        };
    };
    template <> struct abi<MyCardDemo2::ICardListViewModel>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Stringify(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_CardLists(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_CardLists(void*) noexcept = 0;
        };
    };
    template <> struct abi<MyCardDemo2::ICardModel>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_ToastId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_ToastId(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_ContentTitle(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_ContentTitle(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_ContentDetail(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_ContentDetail(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_AlarmTime(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_AlarmTime(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_StatusColor(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_StatusColor(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_ToJsonObject(void**) noexcept = 0;
        };
    };
    template <> struct abi<MyCardDemo2::ICardViewModel>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_CardId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_CardId(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_HeaderTitle(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_HeaderTitle(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Contents(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Contents(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Stringify(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_ToJsonObject(void**) noexcept = 0;
        };
    };
    template <> struct abi<MyCardDemo2::IMainPage>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_CardListVM(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_CardListVM(void*) noexcept = 0;
        };
    };
    template <> struct abi<MyCardDemo2::IMyConverter>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<MyCardDemo2::ISingleCardUserControl>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_CardTitleVM(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_CardTitleVM(void*) noexcept = 0;
            virtual int32_t WINRT_CALL add_MyDeleteEventHandler(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t WINRT_CALL remove_MyDeleteEventHandler(winrt::event_token) noexcept = 0;
            virtual int32_t WINRT_CALL add_ListViewChangeItemEventHandler(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t WINRT_CALL remove_ListViewChangeItemEventHandler(winrt::event_token) noexcept = 0;
            virtual int32_t WINRT_CALL add_ListViewAddItemEventHandler(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t WINRT_CALL remove_ListViewAddItemEventHandler(winrt::event_token) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_MyCardDemo2_IAddCardContentPage
    {
        MyCardDemo2::CardViewModel AddCardTitleVM() const;
        void AddCardTitleVM(MyCardDemo2::CardViewModel const& value) const;
    };
    template <> struct consume<MyCardDemo2::IAddCardContentPage>
    {
        template <typename D> using type = consume_MyCardDemo2_IAddCardContentPage<D>;
    };
    template <typename D>
    struct consume_MyCardDemo2_ICardListViewModel
    {
        hstring Stringify() const;
        Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> CardLists() const;
        void CardLists(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const& value) const;
    };
    template <> struct consume<MyCardDemo2::ICardListViewModel>
    {
        template <typename D> using type = consume_MyCardDemo2_ICardListViewModel<D>;
    };
    template <typename D>
    struct consume_MyCardDemo2_ICardModel
    {
        hstring ToastId() const;
        void ToastId(param::hstring const& value) const;
        hstring ContentTitle() const;
        void ContentTitle(param::hstring const& value) const;
        hstring ContentDetail() const;
        void ContentDetail(param::hstring const& value) const;
        hstring AlarmTime() const;
        void AlarmTime(param::hstring const& value) const;
        hstring StatusColor() const;
        void StatusColor(param::hstring const& value) const;
        Windows::Data::Json::JsonObject ToJsonObject() const;
    };
    template <> struct consume<MyCardDemo2::ICardModel>
    {
        template <typename D> using type = consume_MyCardDemo2_ICardModel<D>;
    };
    template <typename D>
    struct consume_MyCardDemo2_ICardViewModel
    {
        hstring CardId() const;
        void CardId(param::hstring const& value) const;
        hstring HeaderTitle() const;
        void HeaderTitle(param::hstring const& value) const;
        Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> Contents() const;
        void Contents(Windows::Foundation::Collections::IObservableVector<Windows::Foundation::IInspectable> const& value) const;
        hstring Stringify() const;
        Windows::Data::Json::JsonObject ToJsonObject() const;
    };
    template <> struct consume<MyCardDemo2::ICardViewModel>
    {
        template <typename D> using type = consume_MyCardDemo2_ICardViewModel<D>;
    };
    template <typename D>
    struct consume_MyCardDemo2_IMainPage
    {
        MyCardDemo2::CardListViewModel CardListVM() const;
        void CardListVM(MyCardDemo2::CardListViewModel const& value) const;
    };
    template <> struct consume<MyCardDemo2::IMainPage>
    {
        template <typename D> using type = consume_MyCardDemo2_IMainPage<D>;
    };
    template <typename D>
    struct consume_MyCardDemo2_IMyConverter
    {
    };
    template <> struct consume<MyCardDemo2::IMyConverter>
    {
        template <typename D> using type = consume_MyCardDemo2_IMyConverter<D>;
    };
    template <typename D>
    struct consume_MyCardDemo2_ISingleCardUserControl
    {
        MyCardDemo2::CardViewModel CardTitleVM() const;
        void CardTitleVM(MyCardDemo2::CardViewModel const& value) const;
        winrt::event_token MyDeleteEventHandler(Windows::Foundation::EventHandler<MyCardDemo2::CardViewModel> const& handler) const;
        using MyDeleteEventHandler_revoker = impl::event_revoker<MyCardDemo2::ISingleCardUserControl, &impl::abi_t<MyCardDemo2::ISingleCardUserControl>::remove_MyDeleteEventHandler>;
        MyDeleteEventHandler_revoker MyDeleteEventHandler(auto_revoke_t, Windows::Foundation::EventHandler<MyCardDemo2::CardViewModel> const& handler) const;
        void MyDeleteEventHandler(winrt::event_token const& token) const noexcept;
        winrt::event_token ListViewChangeItemEventHandler(Windows::Foundation::EventHandler<MyCardDemo2::CardModel> const& handler) const;
        using ListViewChangeItemEventHandler_revoker = impl::event_revoker<MyCardDemo2::ISingleCardUserControl, &impl::abi_t<MyCardDemo2::ISingleCardUserControl>::remove_ListViewChangeItemEventHandler>;
        ListViewChangeItemEventHandler_revoker ListViewChangeItemEventHandler(auto_revoke_t, Windows::Foundation::EventHandler<MyCardDemo2::CardModel> const& handler) const;
        void ListViewChangeItemEventHandler(winrt::event_token const& token) const noexcept;
        winrt::event_token ListViewAddItemEventHandler(Windows::Foundation::EventHandler<MyCardDemo2::CardViewModel> const& handler) const;
        using ListViewAddItemEventHandler_revoker = impl::event_revoker<MyCardDemo2::ISingleCardUserControl, &impl::abi_t<MyCardDemo2::ISingleCardUserControl>::remove_ListViewAddItemEventHandler>;
        ListViewAddItemEventHandler_revoker ListViewAddItemEventHandler(auto_revoke_t, Windows::Foundation::EventHandler<MyCardDemo2::CardViewModel> const& handler) const;
        void ListViewAddItemEventHandler(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<MyCardDemo2::ISingleCardUserControl>
    {
        template <typename D> using type = consume_MyCardDemo2_ISingleCardUserControl<D>;
    };
}
#endif
