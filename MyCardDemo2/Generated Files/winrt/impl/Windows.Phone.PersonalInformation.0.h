// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_Windows_Phone_PersonalInformation_0_H
#define WINRT_Windows_Phone_PersonalInformation_0_H
namespace winrt::Windows::Foundation
{
    struct IAsyncAction;
    template <typename TResult> struct IAsyncOperation;
}
namespace winrt::Windows::Foundation::Collections
{
    template <typename K, typename V> struct IMapView;
    template <typename K, typename V> struct IMap;
    template <typename T> struct IVectorView;
    template <typename T> struct IVector;
}
namespace winrt::Windows::Storage::Streams
{
    struct IInputStream;
    struct IRandomAccessStream;
    struct IRandomAccessStreamReference;
}
namespace winrt::Windows::Phone::PersonalInformation
{
    enum class ContactChangeType : int32_t
    {
        Created = 0,
        Modified = 1,
        Deleted = 2,
    };
    enum class ContactQueryResultOrdering : int32_t
    {
        SystemDefault = 0,
        GivenNameFamilyName = 1,
        FamilyNameGivenName = 2,
    };
    enum class ContactStoreApplicationAccessMode : int32_t
    {
        LimitedReadOnly = 0,
        ReadOnly = 1,
    };
    enum class ContactStoreSystemAccessMode : int32_t
    {
        ReadOnly = 0,
        ReadWrite = 1,
    };
    enum class VCardFormat : int32_t
    {
        Version2_1 = 0,
        Version3 = 1,
    };
    struct IContactAddress;
    struct IContactChangeRecord;
    struct IContactInformation;
    struct IContactInformation2;
    struct IContactInformationStatics;
    struct IContactQueryOptions;
    struct IContactQueryResult;
    struct IContactStore;
    struct IContactStore2;
    struct IContactStoreStatics;
    struct IKnownContactPropertiesStatics;
    struct IStoredContact;
    struct IStoredContactFactory;
    struct ContactAddress;
    struct ContactChangeRecord;
    struct ContactInformation;
    struct ContactQueryOptions;
    struct ContactQueryResult;
    struct ContactStore;
    struct KnownContactProperties;
    struct StoredContact;
}
namespace winrt::impl
{
    template <> struct category<Windows::Phone::PersonalInformation::IContactAddress>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IContactChangeRecord>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IContactInformation>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IContactInformation2>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IContactInformationStatics>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IContactQueryOptions>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IContactQueryResult>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IContactStore>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IContactStore2>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IContactStoreStatics>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IStoredContact>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::IStoredContactFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::ContactAddress>
    {
        using type = class_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::ContactChangeRecord>
    {
        using type = class_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::ContactInformation>
    {
        using type = class_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::ContactQueryOptions>
    {
        using type = class_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::ContactQueryResult>
    {
        using type = class_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::ContactStore>
    {
        using type = class_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::KnownContactProperties>
    {
        using type = class_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::StoredContact>
    {
        using type = class_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::ContactChangeType>
    {
        using type = enum_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::ContactQueryResultOrdering>
    {
        using type = enum_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::ContactStoreApplicationAccessMode>
    {
        using type = enum_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::ContactStoreSystemAccessMode>
    {
        using type = enum_category;
    };
    template <> struct category<Windows::Phone::PersonalInformation::VCardFormat>
    {
        using type = enum_category;
    };
    template <> struct name<Windows::Phone::PersonalInformation::IContactAddress>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IContactAddress" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IContactChangeRecord>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IContactChangeRecord" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IContactInformation>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IContactInformation" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IContactInformation2>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IContactInformation2" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IContactInformationStatics>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IContactInformationStatics" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IContactQueryOptions>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IContactQueryOptions" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IContactQueryResult>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IContactQueryResult" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IContactStore>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IContactStore" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IContactStore2>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IContactStore2" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IContactStoreStatics>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IContactStoreStatics" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IKnownContactPropertiesStatics" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IStoredContact>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IStoredContact" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::IStoredContactFactory>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.IStoredContactFactory" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::ContactAddress>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.ContactAddress" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::ContactChangeRecord>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.ContactChangeRecord" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::ContactInformation>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.ContactInformation" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::ContactQueryOptions>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.ContactQueryOptions" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::ContactQueryResult>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.ContactQueryResult" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::ContactStore>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.ContactStore" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::KnownContactProperties>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.KnownContactProperties" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::StoredContact>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.StoredContact" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::ContactChangeType>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.ContactChangeType" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::ContactQueryResultOrdering>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.ContactQueryResultOrdering" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::ContactStoreApplicationAccessMode>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.ContactStoreApplicationAccessMode" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::ContactStoreSystemAccessMode>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.ContactStoreSystemAccessMode" };
    };
    template <> struct name<Windows::Phone::PersonalInformation::VCardFormat>
    {
        static constexpr auto & value{ L"Windows.Phone.PersonalInformation.VCardFormat" };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IContactAddress>
    {
        static constexpr guid value{ 0x5F24F927,0x94A9,0x44A2,{ 0xA1,0x55,0x2D,0x0B,0x37,0xD1,0xDC,0xCD } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IContactChangeRecord>
    {
        static constexpr guid value{ 0xB9D3F78F,0x513B,0x4742,{ 0xBE,0x00,0xCC,0x5C,0x5C,0x23,0x6B,0x04 } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IContactInformation>
    {
        static constexpr guid value{ 0xE2B51FFC,0xE792,0x4AB7,{ 0xB1,0x5B,0xF2,0xE0,0x78,0x66,0x4D,0xEA } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IContactInformation2>
    {
        static constexpr guid value{ 0x3198B20C,0x621E,0x4668,{ 0xAC,0x38,0xD6,0x67,0xB8,0x7D,0x06,0xD5 } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IContactInformationStatics>
    {
        static constexpr guid value{ 0x0F67BB29,0x03D0,0x4BE6,{ 0xB2,0xA5,0xFB,0x13,0x85,0x9F,0x12,0x02 } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IContactQueryOptions>
    {
        static constexpr guid value{ 0x580CAB76,0x3F31,0x46C1,{ 0x9A,0x50,0x42,0x4A,0x53,0xDA,0xCA,0xE3 } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IContactQueryResult>
    {
        static constexpr guid value{ 0xC03DB722,0xECDB,0x4700,{ 0x85,0x7E,0x3E,0x78,0x64,0x26,0xB0,0x4B } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IContactStore>
    {
        static constexpr guid value{ 0xB2CD6FEF,0x2BFD,0x4FAD,{ 0x85,0x52,0x4E,0x69,0x80,0x97,0xE8,0xEB } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IContactStore2>
    {
        static constexpr guid value{ 0x65F1B64F,0xD653,0x43A7,{ 0xB2,0x36,0xB3,0x0C,0x0F,0x4D,0x72,0x69 } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IContactStoreStatics>
    {
        static constexpr guid value{ 0xA804FE22,0x4BEB,0x44CC,{ 0xA5,0x72,0x67,0xA5,0xB9,0x2E,0x85,0x67 } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>
    {
        static constexpr guid value{ 0xD5812B01,0x2CED,0x4EE6,{ 0xB1,0xD6,0x09,0x4B,0xF8,0x8E,0xF0,0xB6 } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IStoredContact>
    {
        static constexpr guid value{ 0xB070B7B1,0x263D,0x4E71,{ 0xAB,0xE7,0x59,0x1D,0x24,0x66,0x57,0x0E } };
    };
    template <> struct guid_storage<Windows::Phone::PersonalInformation::IStoredContactFactory>
    {
        static constexpr guid value{ 0x49EDE921,0xC225,0x4FD9,{ 0x89,0xC5,0xCE,0xCC,0x2C,0x8A,0x4B,0x79 } };
    };
    template <> struct default_interface<Windows::Phone::PersonalInformation::ContactAddress>
    {
        using type = Windows::Phone::PersonalInformation::IContactAddress;
    };
    template <> struct default_interface<Windows::Phone::PersonalInformation::ContactChangeRecord>
    {
        using type = Windows::Phone::PersonalInformation::IContactChangeRecord;
    };
    template <> struct default_interface<Windows::Phone::PersonalInformation::ContactInformation>
    {
        using type = Windows::Phone::PersonalInformation::IContactInformation;
    };
    template <> struct default_interface<Windows::Phone::PersonalInformation::ContactQueryOptions>
    {
        using type = Windows::Phone::PersonalInformation::IContactQueryOptions;
    };
    template <> struct default_interface<Windows::Phone::PersonalInformation::ContactQueryResult>
    {
        using type = Windows::Phone::PersonalInformation::IContactQueryResult;
    };
    template <> struct default_interface<Windows::Phone::PersonalInformation::ContactStore>
    {
        using type = Windows::Phone::PersonalInformation::IContactStore;
    };
    template <> struct default_interface<Windows::Phone::PersonalInformation::StoredContact>
    {
        using type = Windows::Phone::PersonalInformation::IStoredContact;
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IContactAddress>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Country(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Country(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Locality(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Locality(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Region(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_Region(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_PostalCode(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_PostalCode(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_StreetAddress(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_StreetAddress(void*) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IContactChangeRecord>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_ChangeType(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_RevisionNumber(uint64_t*) noexcept = 0;
            virtual int32_t WINRT_CALL get_Id(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_RemoteId(void**) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IContactInformation>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_DisplayName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_DisplayName(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_FamilyName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_FamilyName(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_GivenName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_GivenName(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_HonorificPrefix(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_HonorificPrefix(void*) noexcept = 0;
            virtual int32_t WINRT_CALL get_HonorificSuffix(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_HonorificSuffix(void*) noexcept = 0;
            virtual int32_t WINRT_CALL GetDisplayPictureAsync(void**) noexcept = 0;
            virtual int32_t WINRT_CALL SetDisplayPictureAsync(void*, void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_DisplayPicture(void**) noexcept = 0;
            virtual int32_t WINRT_CALL GetPropertiesAsync(void**) noexcept = 0;
            virtual int32_t WINRT_CALL ToVcardAsync(void**) noexcept = 0;
            virtual int32_t WINRT_CALL ToVcardWithOptionsAsync(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IContactInformation2>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_DisplayPictureDate(int64_t*) noexcept = 0;
            virtual int32_t WINRT_CALL put_DisplayPictureDate(int64_t) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IContactInformationStatics>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL ParseVcardAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IContactQueryOptions>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_DesiredFields(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_OrderBy(int32_t*) noexcept = 0;
            virtual int32_t WINRT_CALL put_OrderBy(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IContactQueryResult>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL GetContactCountAsync(void**) noexcept = 0;
            virtual int32_t WINRT_CALL GetContactsAsync(void**) noexcept = 0;
            virtual int32_t WINRT_CALL GetContactsAsyncInRange(uint32_t, uint32_t, void**) noexcept = 0;
            virtual int32_t WINRT_CALL GetCurrentQueryOptions(void**) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IContactStore>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL FindContactByRemoteIdAsync(void*, void**) noexcept = 0;
            virtual int32_t WINRT_CALL FindContactByIdAsync(void*, void**) noexcept = 0;
            virtual int32_t WINRT_CALL DeleteContactAsync(void*, void**) noexcept = 0;
            virtual int32_t WINRT_CALL CreateContactQueryDefault(void**) noexcept = 0;
            virtual int32_t WINRT_CALL CreateContactQueryWithOptions(void*, void**) noexcept = 0;
            virtual int32_t WINRT_CALL DeleteAsync(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_RevisionNumber(uint64_t*) noexcept = 0;
            virtual int32_t WINRT_CALL GetChangesAsync(uint64_t, void**) noexcept = 0;
            virtual int32_t WINRT_CALL LoadExtendedPropertiesAsync(void**) noexcept = 0;
            virtual int32_t WINRT_CALL SaveExtendedPropertiesAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IContactStore2>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateMeContactAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IContactStoreStatics>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateOrOpenAsync(void**) noexcept = 0;
            virtual int32_t WINRT_CALL CreateOrOpenWithOptionsAsync(int32_t, int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_DisplayName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_FamilyName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_GivenName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_HonorificPrefix(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_HonorificSuffix(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_AdditionalName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Address(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_OtherAddress(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Email(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_WorkAddress(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_WorkTelephone(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_JobTitle(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Birthdate(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Anniversary(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Telephone(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_MobileTelephone(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Url(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Notes(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_WorkFax(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Children(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_SignificantOther(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_CompanyName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_CompanyTelephone(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_HomeFax(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_AlternateTelephone(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Manager(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Nickname(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_OfficeLocation(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_WorkEmail(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_YomiGivenName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_YomiFamilyName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_YomiCompanyName(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_OtherEmail(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_AlternateMobileTelephone(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_AlternateWorkTelephone(void**) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IStoredContact>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_Store(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Id(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_RemoteId(void**) noexcept = 0;
            virtual int32_t WINRT_CALL put_RemoteId(void*) noexcept = 0;
            virtual int32_t WINRT_CALL GetExtendedPropertiesAsync(void**) noexcept = 0;
            virtual int32_t WINRT_CALL SaveAsync(void**) noexcept = 0;
            virtual int32_t WINRT_CALL ReplaceExistingContactAsync(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<Windows::Phone::PersonalInformation::IStoredContactFactory>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateStoredContact(void*, void**) noexcept = 0;
            virtual int32_t WINRT_CALL CreateStoredContactFromInformation(void*, void*, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IContactAddress
    {
        hstring Country() const;
        void Country(param::hstring const& value) const;
        hstring Locality() const;
        void Locality(param::hstring const& value) const;
        hstring Region() const;
        void Region(param::hstring const& value) const;
        hstring PostalCode() const;
        void PostalCode(param::hstring const& value) const;
        hstring StreetAddress() const;
        void StreetAddress(param::hstring const& value) const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IContactAddress>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IContactAddress<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IContactChangeRecord
    {
        Windows::Phone::PersonalInformation::ContactChangeType ChangeType() const;
        uint64_t RevisionNumber() const;
        hstring Id() const;
        hstring RemoteId() const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IContactChangeRecord>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IContactChangeRecord<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IContactInformation
    {
        hstring DisplayName() const;
        void DisplayName(param::hstring const& value) const;
        hstring FamilyName() const;
        void FamilyName(param::hstring const& value) const;
        hstring GivenName() const;
        void GivenName(param::hstring const& value) const;
        hstring HonorificPrefix() const;
        void HonorificPrefix(param::hstring const& value) const;
        hstring HonorificSuffix() const;
        void HonorificSuffix(param::hstring const& value) const;
        Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> GetDisplayPictureAsync() const;
        Windows::Foundation::IAsyncAction SetDisplayPictureAsync(Windows::Storage::Streams::IInputStream const& stream) const;
        Windows::Storage::Streams::IRandomAccessStreamReference DisplayPicture() const;
        Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable>> GetPropertiesAsync() const;
        Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> ToVcardAsync() const;
        Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> ToVcardAsync(Windows::Phone::PersonalInformation::VCardFormat const& format) const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IContactInformation>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IContactInformation<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IContactInformation2
    {
        Windows::Foundation::DateTime DisplayPictureDate() const;
        void DisplayPictureDate(Windows::Foundation::DateTime const& returnValue) const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IContactInformation2>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IContactInformation2<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IContactInformationStatics
    {
        Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactInformation> ParseVcardAsync(Windows::Storage::Streams::IInputStream const& vcard) const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IContactInformationStatics>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IContactInformationStatics<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IContactQueryOptions
    {
        Windows::Foundation::Collections::IVector<hstring> DesiredFields() const;
        Windows::Phone::PersonalInformation::ContactQueryResultOrdering OrderBy() const;
        void OrderBy(Windows::Phone::PersonalInformation::ContactQueryResultOrdering const& value) const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IContactQueryOptions>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IContactQueryOptions<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IContactQueryResult
    {
        Windows::Foundation::IAsyncOperation<uint32_t> GetContactCountAsync() const;
        Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Phone::PersonalInformation::StoredContact>> GetContactsAsync() const;
        Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Phone::PersonalInformation::StoredContact>> GetContactsAsync(uint32_t startIndex, uint32_t maxNumberOfItems) const;
        Windows::Phone::PersonalInformation::ContactQueryOptions GetCurrentQueryOptions() const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IContactQueryResult>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IContactQueryResult<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IContactStore
    {
        Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::StoredContact> FindContactByRemoteIdAsync(param::hstring const& id) const;
        Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::StoredContact> FindContactByIdAsync(param::hstring const& id) const;
        Windows::Foundation::IAsyncAction DeleteContactAsync(param::hstring const& id) const;
        Windows::Phone::PersonalInformation::ContactQueryResult CreateContactQuery() const;
        Windows::Phone::PersonalInformation::ContactQueryResult CreateContactQuery(Windows::Phone::PersonalInformation::ContactQueryOptions const& options) const;
        Windows::Foundation::IAsyncAction DeleteAsync() const;
        uint64_t RevisionNumber() const;
        Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Phone::PersonalInformation::ContactChangeRecord>> GetChangesAsync(uint64_t baseRevisionNumber) const;
        Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable>> LoadExtendedPropertiesAsync() const;
        Windows::Foundation::IAsyncAction SaveExtendedPropertiesAsync(param::map_view<hstring, Windows::Foundation::IInspectable> const& data) const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IContactStore>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IContactStore<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IContactStore2
    {
        Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::StoredContact> CreateMeContactAsync(param::hstring const& id) const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IContactStore2>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IContactStore2<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IContactStoreStatics
    {
        Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactStore> CreateOrOpenAsync() const;
        Windows::Foundation::IAsyncOperation<Windows::Phone::PersonalInformation::ContactStore> CreateOrOpenAsync(Windows::Phone::PersonalInformation::ContactStoreSystemAccessMode const& access, Windows::Phone::PersonalInformation::ContactStoreApplicationAccessMode const& sharing) const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IContactStoreStatics>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IContactStoreStatics<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics
    {
        hstring DisplayName() const;
        hstring FamilyName() const;
        hstring GivenName() const;
        hstring HonorificPrefix() const;
        hstring HonorificSuffix() const;
        hstring AdditionalName() const;
        hstring Address() const;
        hstring OtherAddress() const;
        hstring Email() const;
        hstring WorkAddress() const;
        hstring WorkTelephone() const;
        hstring JobTitle() const;
        hstring Birthdate() const;
        hstring Anniversary() const;
        hstring Telephone() const;
        hstring MobileTelephone() const;
        hstring Url() const;
        hstring Notes() const;
        hstring WorkFax() const;
        hstring Children() const;
        hstring SignificantOther() const;
        hstring CompanyName() const;
        hstring CompanyTelephone() const;
        hstring HomeFax() const;
        hstring AlternateTelephone() const;
        hstring Manager() const;
        hstring Nickname() const;
        hstring OfficeLocation() const;
        hstring WorkEmail() const;
        hstring YomiGivenName() const;
        hstring YomiFamilyName() const;
        hstring YomiCompanyName() const;
        hstring OtherEmail() const;
        hstring AlternateMobileTelephone() const;
        hstring AlternateWorkTelephone() const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IKnownContactPropertiesStatics>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IKnownContactPropertiesStatics<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IStoredContact
    {
        Windows::Phone::PersonalInformation::ContactStore Store() const;
        hstring Id() const;
        hstring RemoteId() const;
        void RemoteId(param::hstring const& value) const;
        Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::IInspectable>> GetExtendedPropertiesAsync() const;
        Windows::Foundation::IAsyncAction SaveAsync() const;
        Windows::Foundation::IAsyncAction ReplaceExistingContactAsync(param::hstring const& id) const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IStoredContact>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IStoredContact<D>;
    };
    template <typename D>
    struct consume_Windows_Phone_PersonalInformation_IStoredContactFactory
    {
        Windows::Phone::PersonalInformation::StoredContact CreateStoredContact(Windows::Phone::PersonalInformation::ContactStore const& store) const;
        Windows::Phone::PersonalInformation::StoredContact CreateStoredContactFromInformation(Windows::Phone::PersonalInformation::ContactStore const& store, Windows::Phone::PersonalInformation::ContactInformation const& contact) const;
    };
    template <> struct consume<Windows::Phone::PersonalInformation::IStoredContactFactory>
    {
        template <typename D> using type = consume_Windows_Phone_PersonalInformation_IStoredContactFactory<D>;
    };
}
#endif
