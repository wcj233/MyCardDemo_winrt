// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_Windows_Phone_Media_Devices_H
#define WINRT_Windows_Phone_Media_Devices_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.190506.1"), "Mismatched C++/WinRT headers.");
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Phone.Media.Devices.2.h"
namespace winrt::impl
{
    template <typename D> Windows::Phone::Media::Devices::AudioRoutingEndpoint consume_Windows_Phone_Media_Devices_IAudioRoutingManager<D>::GetAudioEndpoint() const
    {
        Windows::Phone::Media::Devices::AudioRoutingEndpoint endpoint;
        check_hresult(WINRT_SHIM(Windows::Phone::Media::Devices::IAudioRoutingManager)->GetAudioEndpoint(put_abi(endpoint)));
        return endpoint;
    }
    template <typename D> void consume_Windows_Phone_Media_Devices_IAudioRoutingManager<D>::SetAudioEndpoint(Windows::Phone::Media::Devices::AudioRoutingEndpoint const& endpoint) const
    {
        check_hresult(WINRT_SHIM(Windows::Phone::Media::Devices::IAudioRoutingManager)->SetAudioEndpoint(static_cast<int32_t>(endpoint)));
    }
    template <typename D> winrt::event_token consume_Windows_Phone_Media_Devices_IAudioRoutingManager<D>::AudioEndpointChanged(Windows::Foundation::TypedEventHandler<Windows::Phone::Media::Devices::AudioRoutingManager, Windows::Foundation::IInspectable> const& endpointChangeHandler) const
    {
        winrt::event_token token;
        check_hresult(WINRT_SHIM(Windows::Phone::Media::Devices::IAudioRoutingManager)->add_AudioEndpointChanged(*(void**)(&endpointChangeHandler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Windows_Phone_Media_Devices_IAudioRoutingManager<D>::AudioEndpointChanged_revoker consume_Windows_Phone_Media_Devices_IAudioRoutingManager<D>::AudioEndpointChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Windows::Phone::Media::Devices::AudioRoutingManager, Windows::Foundation::IInspectable> const& endpointChangeHandler) const
    {
        return impl::make_event_revoker<D, AudioEndpointChanged_revoker>(this, AudioEndpointChanged(endpointChangeHandler));
    }
    template <typename D> void consume_Windows_Phone_Media_Devices_IAudioRoutingManager<D>::AudioEndpointChanged(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_SHIM(Windows::Phone::Media::Devices::IAudioRoutingManager)->remove_AudioEndpointChanged(impl::bind_in(token)));
    }
    template <typename D> Windows::Phone::Media::Devices::AvailableAudioRoutingEndpoints consume_Windows_Phone_Media_Devices_IAudioRoutingManager<D>::AvailableAudioEndpoints() const
    {
        Windows::Phone::Media::Devices::AvailableAudioRoutingEndpoints value;
        check_hresult(WINRT_SHIM(Windows::Phone::Media::Devices::IAudioRoutingManager)->get_AvailableAudioEndpoints(put_abi(value)));
        return value;
    }
    template <typename D> Windows::Phone::Media::Devices::AudioRoutingManager consume_Windows_Phone_Media_Devices_IAudioRoutingManagerStatics<D>::GetDefault() const
    {
        void* audioRoutingManager{};
        check_hresult(WINRT_SHIM(Windows::Phone::Media::Devices::IAudioRoutingManagerStatics)->GetDefault(&audioRoutingManager));
        return { audioRoutingManager, take_ownership_from_abi };
    }
    template <typename D>
    struct produce<D, Windows::Phone::Media::Devices::IAudioRoutingManager> : produce_base<D, Windows::Phone::Media::Devices::IAudioRoutingManager>
    {
        int32_t WINRT_CALL GetAudioEndpoint(int32_t* endpoint) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *endpoint = detach_from<Windows::Phone::Media::Devices::AudioRoutingEndpoint>(this->shim().GetAudioEndpoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL SetAudioEndpoint(int32_t endpoint) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAudioEndpoint(*reinterpret_cast<Windows::Phone::Media::Devices::AudioRoutingEndpoint const*>(&endpoint));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL add_AudioEndpointChanged(void* endpointChangeHandler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().AudioEndpointChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Windows::Phone::Media::Devices::AudioRoutingManager, Windows::Foundation::IInspectable> const*>(&endpointChangeHandler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL remove_AudioEndpointChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AudioEndpointChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t WINRT_CALL get_AvailableAudioEndpoints(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Phone::Media::Devices::AvailableAudioRoutingEndpoints>(this->shim().AvailableAudioEndpoints());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Phone::Media::Devices::IAudioRoutingManagerStatics> : produce_base<D, Windows::Phone::Media::Devices::IAudioRoutingManagerStatics>
    {
        int32_t WINRT_CALL GetDefault(void** audioRoutingManager) noexcept final try
        {
            clear_abi(audioRoutingManager);
            typename D::abi_guard guard(this->shim());
            *audioRoutingManager = detach_from<Windows::Phone::Media::Devices::AudioRoutingManager>(this->shim().GetDefault());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
namespace winrt::Windows::Phone::Media::Devices
{
    inline Windows::Phone::Media::Devices::AudioRoutingManager AudioRoutingManager::GetDefault()
    {
        return impl::call_factory<AudioRoutingManager, Windows::Phone::Media::Devices::IAudioRoutingManagerStatics>([&](auto&& f) { return f.GetDefault(); });
    }
}
namespace std
{
    template<> struct hash<winrt::Windows::Phone::Media::Devices::IAudioRoutingManager> : winrt::impl::hash_base<winrt::Windows::Phone::Media::Devices::IAudioRoutingManager> {};
    template<> struct hash<winrt::Windows::Phone::Media::Devices::IAudioRoutingManagerStatics> : winrt::impl::hash_base<winrt::Windows::Phone::Media::Devices::IAudioRoutingManagerStatics> {};
    template<> struct hash<winrt::Windows::Phone::Media::Devices::AudioRoutingManager> : winrt::impl::hash_base<winrt::Windows::Phone::Media::Devices::AudioRoutingManager> {};
}
#endif
