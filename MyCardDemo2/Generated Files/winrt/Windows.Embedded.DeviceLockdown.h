// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_Windows_Embedded_DeviceLockdown_H
#define WINRT_Windows_Embedded_DeviceLockdown_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.190506.1"), "Mismatched C++/WinRT headers.");
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.Embedded.DeviceLockdown.2.h"
namespace winrt::impl
{
    template <typename D> hstring consume_Windows_Embedded_DeviceLockdown_IDeviceLockdownProfileInformation<D>::Name() const
    {
        void* phProfileName{};
        check_hresult(WINRT_SHIM(Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileInformation)->get_Name(&phProfileName));
        return { phProfileName, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Collections::IVectorView<winrt::guid> consume_Windows_Embedded_DeviceLockdown_IDeviceLockdownProfileStatics<D>::GetSupportedLockdownProfiles() const
    {
        void* ppProfileIDs{};
        check_hresult(WINRT_SHIM(Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics)->GetSupportedLockdownProfiles(&ppProfileIDs));
        return { ppProfileIDs, take_ownership_from_abi };
    }
    template <typename D> winrt::guid consume_Windows_Embedded_DeviceLockdown_IDeviceLockdownProfileStatics<D>::GetCurrentLockdownProfile() const
    {
        winrt::guid pProfileID;
        check_hresult(WINRT_SHIM(Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics)->GetCurrentLockdownProfile(put_abi(pProfileID)));
        return pProfileID;
    }
    template <typename D> Windows::Foundation::IAsyncAction consume_Windows_Embedded_DeviceLockdown_IDeviceLockdownProfileStatics<D>::ApplyLockdownProfileAsync(winrt::guid const& profileID) const
    {
        void* ppWaitableOperation{};
        check_hresult(WINRT_SHIM(Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics)->ApplyLockdownProfileAsync(impl::bind_in(profileID), &ppWaitableOperation));
        return { ppWaitableOperation, take_ownership_from_abi };
    }
    template <typename D> Windows::Embedded::DeviceLockdown::DeviceLockdownProfileInformation consume_Windows_Embedded_DeviceLockdown_IDeviceLockdownProfileStatics<D>::GetLockdownProfileInformation(winrt::guid const& profileID) const
    {
        void* ppInformation{};
        check_hresult(WINRT_SHIM(Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics)->GetLockdownProfileInformation(impl::bind_in(profileID), &ppInformation));
        return { ppInformation, take_ownership_from_abi };
    }
    template <typename D>
    struct produce<D, Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileInformation> : produce_base<D, Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileInformation>
    {
        int32_t WINRT_CALL get_Name(void** phProfileName) noexcept final try
        {
            clear_abi(phProfileName);
            typename D::abi_guard guard(this->shim());
            *phProfileName = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics> : produce_base<D, Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics>
    {
        int32_t WINRT_CALL GetSupportedLockdownProfiles(void** ppProfileIDs) noexcept final try
        {
            clear_abi(ppProfileIDs);
            typename D::abi_guard guard(this->shim());
            *ppProfileIDs = detach_from<Windows::Foundation::Collections::IVectorView<winrt::guid>>(this->shim().GetSupportedLockdownProfiles());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetCurrentLockdownProfile(winrt::guid* pProfileID) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *pProfileID = detach_from<winrt::guid>(this->shim().GetCurrentLockdownProfile());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL ApplyLockdownProfileAsync(winrt::guid profileID, void** ppWaitableOperation) noexcept final try
        {
            clear_abi(ppWaitableOperation);
            typename D::abi_guard guard(this->shim());
            *ppWaitableOperation = detach_from<Windows::Foundation::IAsyncAction>(this->shim().ApplyLockdownProfileAsync(*reinterpret_cast<winrt::guid const*>(&profileID)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetLockdownProfileInformation(winrt::guid profileID, void** ppInformation) noexcept final try
        {
            clear_abi(ppInformation);
            typename D::abi_guard guard(this->shim());
            *ppInformation = detach_from<Windows::Embedded::DeviceLockdown::DeviceLockdownProfileInformation>(this->shim().GetLockdownProfileInformation(*reinterpret_cast<winrt::guid const*>(&profileID)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
namespace winrt::Windows::Embedded::DeviceLockdown
{
    inline Windows::Foundation::Collections::IVectorView<winrt::guid> DeviceLockdownProfile::GetSupportedLockdownProfiles()
    {
        return impl::call_factory<DeviceLockdownProfile, Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics>([&](auto&& f) { return f.GetSupportedLockdownProfiles(); });
    }
    inline winrt::guid DeviceLockdownProfile::GetCurrentLockdownProfile()
    {
        return impl::call_factory<DeviceLockdownProfile, Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics>([&](auto&& f) { return f.GetCurrentLockdownProfile(); });
    }
    inline Windows::Foundation::IAsyncAction DeviceLockdownProfile::ApplyLockdownProfileAsync(winrt::guid const& profileID)
    {
        return impl::call_factory<DeviceLockdownProfile, Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics>([&](auto&& f) { return f.ApplyLockdownProfileAsync(profileID); });
    }
    inline Windows::Embedded::DeviceLockdown::DeviceLockdownProfileInformation DeviceLockdownProfile::GetLockdownProfileInformation(winrt::guid const& profileID)
    {
        return impl::call_factory<DeviceLockdownProfile, Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics>([&](auto&& f) { return f.GetLockdownProfileInformation(profileID); });
    }
}
namespace std
{
    template<> struct hash<winrt::Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileInformation> : winrt::impl::hash_base<winrt::Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileInformation> {};
    template<> struct hash<winrt::Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics> : winrt::impl::hash_base<winrt::Windows::Embedded::DeviceLockdown::IDeviceLockdownProfileStatics> {};
    template<> struct hash<winrt::Windows::Embedded::DeviceLockdown::DeviceLockdownProfile> : winrt::impl::hash_base<winrt::Windows::Embedded::DeviceLockdown::DeviceLockdownProfile> {};
    template<> struct hash<winrt::Windows::Embedded::DeviceLockdown::DeviceLockdownProfileInformation> : winrt::impl::hash_base<winrt::Windows::Embedded::DeviceLockdown::DeviceLockdownProfileInformation> {};
}
#endif
