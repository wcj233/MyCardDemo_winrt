// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190506.1

#ifndef WINRT_Microsoft_Toolkit_Uwp_Notifications_H
#define WINRT_Microsoft_Toolkit_Uwp_Notifications_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.190506.1"), "Mismatched C++/WinRT headers.");
#include "winrt/impl/Windows.Data.Xml.Dom.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.Toolkit.Uwp.Notifications.2.h"
namespace winrt::impl
{
    template <typename D> Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroup> consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveGroupClass<D>::Children() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveGroupClass)->get_Children(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageAlign consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveImageClass<D>::HintAlign() const
    {
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageAlign value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass)->get_HintAlign(put_abi(value)));
        return value;
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageCrop consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveImageClass<D>::HintCrop() const
    {
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageCrop value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass)->get_HintCrop(put_abi(value)));
        return value;
    }
    template <typename D> Windows::Foundation::IReference<bool> consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveImageClass<D>::HintRemoveMargin() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass)->get_HintRemoveMargin(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveImageClass<D>::HintAlign(Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageAlign const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass)->put_HintAlign(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveImageClass<D>::HintCrop(Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageCrop const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass)->put_HintCrop(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveImageClass<D>::HintRemoveMargin(Windows::Foundation::IReference<bool> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass)->put_HintRemoveMargin(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveImageClass<D>::ToString() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass)->ToString(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Collections::IMap<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarBindableProperty, hstring> consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarClass<D>::Bindings() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass)->get_Bindings(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarClass<D>::Status() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass)->get_Status(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarClass<D>::Title() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass)->get_Title(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarClass<D>::Value() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass)->get_Value(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarClass<D>::ValueStringOverride() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass)->get_ValueStringOverride(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarClass<D>::Status(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass)->put_Status(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarClass<D>::Title(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass)->put_Title(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarClass<D>::Value(Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass)->put_Value(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarClass<D>::ValueStringOverride(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass)->put_ValueStringOverride(*(void**)(&value)));
    }
    template <typename D> bool consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarValueClass<D>::IsIndeterminate() const
    {
        bool value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass)->get_IsIndeterminate(&value));
        return value;
    }
    template <typename D> double consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarValueClass<D>::Value() const
    {
        double value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass)->get_Value(&value));
        return value;
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarValueClass<D>::IsIndeterminate(bool value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass)->put_IsIndeterminate(value));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarValueClass<D>::Value(double value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass)->put_Value(value));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarValueStatic<D>::FromValue(double d) const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic)->FromValue(d, &value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveProgressBarValueStatic<D>::Indeterminate() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic)->get_Indeterminate(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild> consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveSubgroupClass<D>::Children() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass)->get_Children(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroupTextStacking consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveSubgroupClass<D>::HintTextStacking() const
    {
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroupTextStacking value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass)->get_HintTextStacking(put_abi(value)));
        return value;
    }
    template <typename D> Windows::Foundation::IReference<int32_t> consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveSubgroupClass<D>::HintWeight() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass)->get_HintWeight(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveSubgroupClass<D>::HintTextStacking(Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroupTextStacking const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass)->put_HintTextStacking(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveSubgroupClass<D>::HintWeight(Windows::Foundation::IReference<int32_t> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass)->put_HintWeight(*(void**)(&value)));
    }
    template <typename D> Windows::Foundation::Collections::IMap<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextBindableProperty, hstring> consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::Bindings() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->get_Bindings(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextAlign consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::HintAlign() const
    {
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextAlign value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->get_HintAlign(put_abi(value)));
        return value;
    }
    template <typename D> Windows::Foundation::IReference<int32_t> consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::HintMaxLines() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->get_HintMaxLines(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IReference<int32_t> consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::HintMinLines() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->get_HintMinLines(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextStyle consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::HintStyle() const
    {
        Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextStyle value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->get_HintStyle(put_abi(value)));
        return value;
    }
    template <typename D> Windows::Foundation::IReference<bool> consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::HintWrap() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->get_HintWrap(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::Language() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->get_Language(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::Text() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->get_Text(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::HintAlign(Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextAlign const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->put_HintAlign(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::HintMaxLines(Windows::Foundation::IReference<int32_t> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->put_HintMaxLines(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::HintMinLines(Windows::Foundation::IReference<int32_t> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->put_HintMinLines(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::HintStyle(Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextStyle const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->put_HintStyle(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::HintWrap(Windows::Foundation::IReference<bool> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->put_HintWrap(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::Language(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->put_Language(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::Text(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->put_Text(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IAdaptiveTextClass<D>::ToString() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass)->ToString(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeGlyphContentClass<D>::Glyph() const
    {
        Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass)->get_Glyph(put_abi(value)));
        return value;
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeGlyphContentClass<D>::Glyph(Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass)->put_Glyph(static_cast<int32_t>(value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeGlyphContentClass<D>::ToString() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass)->ToString(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphContent consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeGlyphContentFactory<D>::CreateBadgeGlyphContent(Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue const& glyph) const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentFactory)->CreateBadgeGlyphContent(static_cast<int32_t>(glyph), &value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> uint32_t consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeNumericContentClass<D>::Number() const
    {
        uint32_t value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass)->get_Number(&value));
        return value;
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeNumericContentClass<D>::Number(uint32_t value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass)->put_Number(value));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeNumericContentClass<D>::ToString() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass)->ToString(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::BadgeNumericContent consume_Microsoft_Toolkit_Uwp_Notifications_IBadgeNumericContentFactory<D>::CreateBadgeNumericContent(uint32_t number) const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentFactory)->CreateBadgeNumericContent(number, &value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IBaseImage<D>::Source() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBaseImage)->get_Source(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IBaseImage<D>::Source(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBaseImage)->put_Source(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IBaseImage<D>::AlternateText() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBaseImage)->get_AlternateText(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IBaseImage<D>::AlternateText(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBaseImage)->put_AlternateText(*(void**)(&value)));
    }
    template <typename D> Windows::Foundation::IReference<bool> consume_Microsoft_Toolkit_Uwp_Notifications_IBaseImage<D>::AddImageQuery() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBaseImage)->get_AddImageQuery(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IBaseImage<D>::AddImageQuery(Windows::Foundation::IReference<bool> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBaseImage)->put_AddImageQuery(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IBaseText<D>::Text() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBaseText)->get_Text(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IBaseText<D>::Text(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBaseText)->put_Text(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IBaseText<D>::Language() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBaseText)->get_Language(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IBaseText<D>::Language(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IBaseText)->put_Language(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_INotificationContent<D>::GetContent() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::INotificationContent)->GetContent(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Data::Xml::Dom::XmlDocument consume_Microsoft_Toolkit_Uwp_Notifications_INotificationContent<D>::GetXml() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::INotificationContent)->GetXml(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImageCrop consume_Microsoft_Toolkit_Uwp_Notifications_ITileBackgroundImageClass<D>::HintCrop() const
    {
        Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImageCrop value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass)->get_HintCrop(put_abi(value)));
        return value;
    }
    template <typename D> Windows::Foundation::IReference<int32_t> consume_Microsoft_Toolkit_Uwp_Notifications_ITileBackgroundImageClass<D>::HintOverlay() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass)->get_HintOverlay(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBackgroundImageClass<D>::HintCrop(Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImageCrop const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass)->put_HintCrop(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBackgroundImageClass<D>::HintOverlay(Windows::Foundation::IReference<int32_t> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass)->put_HintOverlay(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileBasicTextClass<D>::Lang() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass)->get_Lang(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileBasicTextClass<D>::Text() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass)->get_Text(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBasicTextClass<D>::Lang(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass)->put_Lang(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBasicTextClass<D>::Text(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass)->put_Text(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileBasicTextClass<D>::ToString() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass)->ToString(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IReference<bool> consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::AddImageQuery() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->get_AddImageQuery(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::Arguments() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->get_Arguments(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Uri consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::BaseUri() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->get_BaseUri(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileBranding consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::Branding() const
    {
        Microsoft::Toolkit::Uwp::Notifications::TileBranding value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->get_Branding(put_abi(value)));
        return value;
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::Content() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->get_Content(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::ContentId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->get_ContentId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::DisplayName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->get_DisplayName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::Language() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->get_Language(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::AddImageQuery(Windows::Foundation::IReference<bool> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->put_AddImageQuery(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::Arguments(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->put_Arguments(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::BaseUri(Windows::Foundation::Uri const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->put_BaseUri(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::Branding(Microsoft::Toolkit::Uwp::Notifications::TileBranding const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->put_Branding(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::ContentId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->put_ContentId(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::Content(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->put_Content(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::DisplayName(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->put_DisplayName(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingClass<D>::Language(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass)->put_Language(*(void**)(&value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImage consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentAdaptiveClass<D>::BackgroundImage() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass)->get_BackgroundImage(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild> consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentAdaptiveClass<D>::Children() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass)->get_Children(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TilePeekImage consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentAdaptiveClass<D>::PeekImage() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass)->get_PeekImage(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileTextStacking consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentAdaptiveClass<D>::TextStacking() const
    {
        Microsoft::Toolkit::Uwp::Notifications::TileTextStacking value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass)->get_TextStacking(put_abi(value)));
        return value;
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentAdaptiveClass<D>::BackgroundImage(Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImage const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass)->put_BackgroundImage(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentAdaptiveClass<D>::PeekImage(Microsoft::Toolkit::Uwp::Notifications::TilePeekImage const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass)->put_PeekImage(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentAdaptiveClass<D>::TextStacking(Microsoft::Toolkit::Uwp::Notifications::TileTextStacking const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass)->put_TextStacking(static_cast<int32_t>(value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileBasicImage consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentContactClass<D>::Image() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass)->get_Image(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileBasicText consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentContactClass<D>::Text() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass)->get_Text(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentContactClass<D>::Image(Microsoft::Toolkit::Uwp::Notifications::TileBasicImage const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass)->put_Image(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentContactClass<D>::Text(Microsoft::Toolkit::Uwp::Notifications::TileBasicText const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass)->put_Text(*(void**)(&value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileBasicImage consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentIconicClass<D>::Icon() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass)->get_Icon(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentIconicClass<D>::Icon(Microsoft::Toolkit::Uwp::Notifications::TileBasicImage const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass)->put_Icon(*(void**)(&value)));
    }
    template <typename D> Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage> consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentPeopleClass<D>::Images() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPeopleClass)->get_Images(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage> consume_Microsoft_Toolkit_Uwp_Notifications_ITileBindingContentPhotosClass<D>::Images() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPhotosClass)->get_Images(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileVisual consume_Microsoft_Toolkit_Uwp_Notifications_ITileContentClass<D>::Visual() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileContentClass)->get_Visual(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileContentClass<D>::GetContent() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileContentClass)->GetContent(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Data::Xml::Dom::XmlDocument consume_Microsoft_Toolkit_Uwp_Notifications_ITileContentClass<D>::GetXml() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileContentClass)->GetXml(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileContentClass<D>::Visual(Microsoft::Toolkit::Uwp::Notifications::TileVisual const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileContentClass)->put_Visual(*(void**)(&value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TilePeekImageCrop consume_Microsoft_Toolkit_Uwp_Notifications_ITilePeekImageClass<D>::HintCrop() const
    {
        Microsoft::Toolkit::Uwp::Notifications::TilePeekImageCrop value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass)->get_HintCrop(put_abi(value)));
        return value;
    }
    template <typename D> Windows::Foundation::IReference<int32_t> consume_Microsoft_Toolkit_Uwp_Notifications_ITilePeekImageClass<D>::HintOverlay() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass)->get_HintOverlay(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITilePeekImageClass<D>::HintCrop(Microsoft::Toolkit::Uwp::Notifications::TilePeekImageCrop const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass)->put_HintCrop(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITilePeekImageClass<D>::HintOverlay(Windows::Foundation::IReference<int32_t> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass)->put_HintOverlay(*(void**)(&value)));
    }
    template <typename D> Windows::Foundation::IReference<bool> consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::AddImageQuery() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_AddImageQuery(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::Arguments() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_Arguments(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Uri consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::BaseUri() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_BaseUri(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileBranding consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::Branding() const
    {
        Microsoft::Toolkit::Uwp::Notifications::TileBranding value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_Branding(put_abi(value)));
        return value;
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::ContentId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_ContentId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::DisplayName() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_DisplayName(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::Language() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_Language(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::LockDetailedStatus1() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_LockDetailedStatus1(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::LockDetailedStatus2() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_LockDetailedStatus2(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::LockDetailedStatus3() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_LockDetailedStatus3(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileBinding consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::TileLarge() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_TileLarge(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileBinding consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::TileMedium() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_TileMedium(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileBinding consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::TileSmall() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_TileSmall(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::TileBinding consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::TileWide() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->get_TileWide(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::AddImageQuery(Windows::Foundation::IReference<bool> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_AddImageQuery(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::Arguments(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_Arguments(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::BaseUri(Windows::Foundation::Uri const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_BaseUri(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::Branding(Microsoft::Toolkit::Uwp::Notifications::TileBranding const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_Branding(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::ContentId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_ContentId(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::DisplayName(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_DisplayName(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::Language(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_Language(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::LockDetailedStatus1(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_LockDetailedStatus1(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::LockDetailedStatus2(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_LockDetailedStatus2(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::LockDetailedStatus3(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_LockDetailedStatus3(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::TileLarge(Microsoft::Toolkit::Uwp::Notifications::TileBinding const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_TileLarge(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::TileMedium(Microsoft::Toolkit::Uwp::Notifications::TileBinding const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_TileMedium(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::TileSmall(Microsoft::Toolkit::Uwp::Notifications::TileBinding const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_TileSmall(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_ITileVisualClass<D>::TileWide(Microsoft::Toolkit::Uwp::Notifications::TileBinding const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass)->put_TileWide(*(void**)(&value)));
    }
    template <typename D> Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::ToastContextMenuItem> consume_Microsoft_Toolkit_Uwp_Notifications_IToastActions<D>::ContextMenuItems() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastActions)->get_ContextMenuItems(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IToastButton> consume_Microsoft_Toolkit_Uwp_Notifications_IToastActionsCustomClass<D>::Buttons() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass)->get_Buttons(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IToastInput> consume_Microsoft_Toolkit_Uwp_Notifications_IToastActionsCustomClass<D>::Inputs() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass)->get_Inputs(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastAfterActivationBehavior consume_Microsoft_Toolkit_Uwp_Notifications_IToastActivationOptionsClass<D>::AfterActivationBehavior() const
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastAfterActivationBehavior value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass)->get_AfterActivationBehavior(put_abi(value)));
        return value;
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastActivationOptionsClass<D>::ProtocolActivationTargetApplicationPfn() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass)->get_ProtocolActivationTargetApplicationPfn(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastActivationOptionsClass<D>::AfterActivationBehavior(Microsoft::Toolkit::Uwp::Notifications::ToastAfterActivationBehavior const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass)->put_AfterActivationBehavior(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastActivationOptionsClass<D>::ProtocolActivationTargetApplicationPfn(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass)->put_ProtocolActivationTargetApplicationPfn(*(void**)(&value)));
    }
    template <typename D> bool consume_Microsoft_Toolkit_Uwp_Notifications_IToastAudioClass<D>::Loop() const
    {
        bool value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass)->get_Loop(&value));
        return value;
    }
    template <typename D> bool consume_Microsoft_Toolkit_Uwp_Notifications_IToastAudioClass<D>::Silent() const
    {
        bool value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass)->get_Silent(&value));
        return value;
    }
    template <typename D> Windows::Foundation::Uri consume_Microsoft_Toolkit_Uwp_Notifications_IToastAudioClass<D>::Src() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass)->get_Src(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastAudioClass<D>::Loop(bool value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass)->put_Loop(value));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastAudioClass<D>::Silent(bool value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass)->put_Silent(value));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastAudioClass<D>::Src(Windows::Foundation::Uri const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass)->put_Src(*(void**)(&value)));
    }
    template <typename D> Windows::Foundation::IReference<bool> consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::AddImageQuery() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->get_AddImageQuery(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogo consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::AppLogoOverride() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->get_AppLogoOverride(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastGenericAttributionText consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::Attribution() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->get_Attribution(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Uri consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::BaseUri() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->get_BaseUri(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild> consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::Children() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->get_Children(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastGenericHeroImage consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::HeroImage() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->get_HeroImage(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::Language() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->get_Language(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::AddImageQuery(Windows::Foundation::IReference<bool> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->put_AddImageQuery(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::AppLogoOverride(Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogo const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->put_AppLogoOverride(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::Attribution(Microsoft::Toolkit::Uwp::Notifications::ToastGenericAttributionText const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->put_Attribution(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::BaseUri(Windows::Foundation::Uri const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->put_BaseUri(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::HeroImage(Microsoft::Toolkit::Uwp::Notifications::ToastGenericHeroImage const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->put_HeroImage(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingGenericClass<D>::Language(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass)->put_Language(*(void**)(&value)));
    }
    template <typename D> Windows::Foundation::IReference<bool> consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingShoulderTapClass<D>::AddImageQuery() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass)->get_AddImageQuery(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Uri consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingShoulderTapClass<D>::BaseUri() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass)->get_BaseUri(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastShoulderTapImage consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingShoulderTapClass<D>::Image() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass)->get_Image(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingShoulderTapClass<D>::Language() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass)->get_Language(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingShoulderTapClass<D>::AddImageQuery(Windows::Foundation::IReference<bool> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass)->put_AddImageQuery(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingShoulderTapClass<D>::BaseUri(Windows::Foundation::Uri const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass)->put_BaseUri(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingShoulderTapClass<D>::Image(Microsoft::Toolkit::Uwp::Notifications::ToastShoulderTapImage const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass)->put_Image(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastBindingShoulderTapClass<D>::Language(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass)->put_Language(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastButton<D>::ImageUri() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButton)->get_ImageUri(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastButton<D>::ImageUri(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButton)->put_ImageUri(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastButton<D>::HintActionId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButton)->get_HintActionId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastButton<D>::HintActionId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButton)->put_HintActionId(*(void**)(&value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonClass<D>::ActivationOptions() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass)->get_ActivationOptions(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastActivationType consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonClass<D>::ActivationType() const
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationType value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass)->get_ActivationType(put_abi(value)));
        return value;
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonClass<D>::Arguments() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass)->get_Arguments(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonClass<D>::Content() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass)->get_Content(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonClass<D>::TextBoxId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass)->get_TextBoxId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonClass<D>::ActivationOptions(Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass)->put_ActivationOptions(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonClass<D>::ActivationType(Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass)->put_ActivationType(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonClass<D>::TextBoxId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass)->put_TextBoxId(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonDismissClass<D>::CustomContent() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissClass)->get_CustomContent(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastButtonDismiss consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonDismissFactory<D>::CreateToastButtonDismiss(param::hstring const& customContent) const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissFactory)->CreateToastButtonDismiss(*(void**)(&customContent), &value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastButton consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonFactory<D>::CreateToastButton(param::hstring const& content, param::hstring const& arguments) const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonFactory)->CreateToastButton(*(void**)(&content), *(void**)(&arguments), &value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonSnoozeClass<D>::CustomContent() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass)->get_CustomContent(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonSnoozeClass<D>::SelectionBoxId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass)->get_SelectionBoxId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonSnoozeClass<D>::SelectionBoxId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass)->put_SelectionBoxId(*(void**)(&value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastButtonSnooze consume_Microsoft_Toolkit_Uwp_Notifications_IToastButtonSnoozeFactory<D>::CreateToastButtonSnooze(param::hstring const& customContent) const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeFactory)->CreateToastButtonSnooze(*(void**)(&customContent), &value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::IToastActions consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Actions() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_Actions(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::ActivationOptions() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_ActivationOptions(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastActivationType consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::ActivationType() const
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationType value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_ActivationType(put_abi(value)));
        return value;
    }
    template <typename D> Windows::Foundation::Collections::IMap<hstring, hstring> consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::AdditionalProperties() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_AdditionalProperties(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastAudio consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Audio() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_Audio(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IReference<Windows::Foundation::DateTime> consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::DisplayTimestamp() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_DisplayTimestamp(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastDuration consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Duration() const
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastDuration value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_Duration(put_abi(value)));
        return value;
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastHeader consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Header() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_Header(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastPeople consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::HintPeople() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_HintPeople(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::HintToastId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_HintToastId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Launch() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_Launch(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastScenario consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Scenario() const
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastScenario value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_Scenario(put_abi(value)));
        return value;
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastVisual consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Visual() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->get_Visual(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Actions(Microsoft::Toolkit::Uwp::Notifications::IToastActions const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_Actions(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::ActivationOptions(Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_ActivationOptions(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::ActivationType(Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_ActivationType(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Audio(Microsoft::Toolkit::Uwp::Notifications::ToastAudio const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_Audio(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::DisplayTimestamp(Windows::Foundation::IReference<Windows::Foundation::DateTime> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_DisplayTimestamp(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Duration(Microsoft::Toolkit::Uwp::Notifications::ToastDuration const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_Duration(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Header(Microsoft::Toolkit::Uwp::Notifications::ToastHeader const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_Header(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::HintPeople(Microsoft::Toolkit::Uwp::Notifications::ToastPeople const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_HintPeople(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::HintToastId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_HintToastId(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Launch(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_Launch(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Scenario(Microsoft::Toolkit::Uwp::Notifications::ToastScenario const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_Scenario(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContentClass<D>::Visual(Microsoft::Toolkit::Uwp::Notifications::ToastVisual const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContentClass)->put_Visual(*(void**)(&value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemClass<D>::ActivationOptions() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass)->get_ActivationOptions(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastActivationType consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemClass<D>::ActivationType() const
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationType value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass)->get_ActivationType(put_abi(value)));
        return value;
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemClass<D>::Arguments() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass)->get_Arguments(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemClass<D>::Content() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass)->get_Content(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemClass<D>::HintActionId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass)->get_HintActionId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemClass<D>::ActivationOptions(Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass)->put_ActivationOptions(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemClass<D>::ActivationType(Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass)->put_ActivationType(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemClass<D>::HintActionId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass)->put_HintActionId(*(void**)(&value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastContextMenuItem consume_Microsoft_Toolkit_Uwp_Notifications_IToastContextMenuItemFactory<D>::CreateToastContextMenuItem(param::hstring const& content, param::hstring const& arguments) const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemFactory)->CreateToastContextMenuItem(*(void**)(&content), *(void**)(&arguments), &value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogoCrop consume_Microsoft_Toolkit_Uwp_Notifications_IToastGenericAppLogoClass<D>::HintCrop() const
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogoCrop value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass)->get_HintCrop(put_abi(value)));
        return value;
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastGenericAppLogoClass<D>::HintCrop(Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogoCrop const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass)->put_HintCrop(static_cast<int32_t>(value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass<D>::ActivationOptions() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass)->get_ActivationOptions(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastActivationType consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass<D>::ActivationType() const
    {
        Microsoft::Toolkit::Uwp::Notifications::ToastActivationType value;
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass)->get_ActivationType(put_abi(value)));
        return value;
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass<D>::Arguments() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass)->get_Arguments(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass<D>::Id() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass)->get_Id(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass<D>::Title() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass)->get_Title(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass<D>::ActivationOptions(Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass)->put_ActivationOptions(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass<D>::ActivationType(Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass)->put_ActivationType(static_cast<int32_t>(value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass<D>::Arguments(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass)->put_Arguments(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass<D>::Id(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass)->put_Id(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderClass<D>::Title(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass)->put_Title(*(void**)(&value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastHeader consume_Microsoft_Toolkit_Uwp_Notifications_IToastHeaderFactory<D>::CreateToastHeader(param::hstring const& id, param::hstring const& title, param::hstring const& arguments) const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastHeaderFactory)->CreateToastHeader(*(void**)(&id), *(void**)(&title), *(void**)(&arguments), &value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastPeopleClass<D>::EmailAddress() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass)->get_EmailAddress(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastPeopleClass<D>::PhoneNumber() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass)->get_PhoneNumber(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastPeopleClass<D>::RemoteId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass)->get_RemoteId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastPeopleClass<D>::EmailAddress(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass)->put_EmailAddress(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastPeopleClass<D>::PhoneNumber(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass)->put_PhoneNumber(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastPeopleClass<D>::RemoteId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass)->put_RemoteId(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxClass<D>::DefaultSelectionBoxItemId() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass)->get_DefaultSelectionBoxItemId(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxClass<D>::Id() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass)->get_Id(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBoxItem> consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxClass<D>::Items() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass)->get_Items(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxClass<D>::Title() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass)->get_Title(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxClass<D>::DefaultSelectionBoxItemId(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass)->put_DefaultSelectionBoxItemId(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxClass<D>::Title(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass)->put_Title(*(void**)(&value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBox consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxFactory<D>::CreateToastSelectionBox(param::hstring const& id) const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxFactory)->CreateToastSelectionBox(*(void**)(&id), &value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxItemClass<D>::Content() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass)->get_Content(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxItemClass<D>::Id() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass)->get_Id(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBoxItem consume_Microsoft_Toolkit_Uwp_Notifications_IToastSelectionBoxItemFactory<D>::CreateToastSelectionBoxItem(param::hstring const& id, param::hstring const& content) const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemFactory)->CreateToastSelectionBoxItem(*(void**)(&id), *(void**)(&content), &value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastSpriteSheet consume_Microsoft_Toolkit_Uwp_Notifications_IToastShoulderTapImageClass<D>::SpriteSheet() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass)->get_SpriteSheet(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastShoulderTapImageClass<D>::SpriteSheet(Microsoft::Toolkit::Uwp::Notifications::ToastSpriteSheet const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass)->put_SpriteSheet(*(void**)(&value)));
    }
    template <typename D> Windows::Foundation::IReference<uint32_t> consume_Microsoft_Toolkit_Uwp_Notifications_IToastSpriteSheetClass<D>::Fps() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass)->get_Fps(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IReference<uint32_t> consume_Microsoft_Toolkit_Uwp_Notifications_IToastSpriteSheetClass<D>::FrameHeight() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass)->get_FrameHeight(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastSpriteSheetClass<D>::Source() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass)->get_Source(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IReference<uint32_t> consume_Microsoft_Toolkit_Uwp_Notifications_IToastSpriteSheetClass<D>::StartingFrame() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass)->get_StartingFrame(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastSpriteSheetClass<D>::Fps(Windows::Foundation::IReference<uint32_t> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass)->put_Fps(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastSpriteSheetClass<D>::FrameHeight(Windows::Foundation::IReference<uint32_t> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass)->put_FrameHeight(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastSpriteSheetClass<D>::Source(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass)->put_Source(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastSpriteSheetClass<D>::StartingFrame(Windows::Foundation::IReference<uint32_t> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass)->put_StartingFrame(*(void**)(&value)));
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxClass<D>::DefaultInput() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass)->get_DefaultInput(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxClass<D>::Id() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass)->get_Id(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxClass<D>::PlaceholderContent() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass)->get_PlaceholderContent(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxClass<D>::Title() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass)->get_Title(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxClass<D>::DefaultInput(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass)->put_DefaultInput(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxClass<D>::PlaceholderContent(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass)->put_PlaceholderContent(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxClass<D>::Title(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass)->put_Title(*(void**)(&value)));
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastTextBox consume_Microsoft_Toolkit_Uwp_Notifications_IToastTextBoxFactory<D>::CreateToastTextBox(param::hstring const& id) const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxFactory)->CreateToastTextBox(*(void**)(&id), &value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::IReference<bool> consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass<D>::AddImageQuery() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass)->get_AddImageQuery(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Windows::Foundation::Uri consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass<D>::BaseUri() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass)->get_BaseUri(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastBindingGeneric consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass<D>::BindingGeneric() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass)->get_BindingGeneric(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> Microsoft::Toolkit::Uwp::Notifications::ToastBindingShoulderTap consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass<D>::BindingShoulderTap() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass)->get_BindingShoulderTap(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> hstring consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass<D>::Language() const
    {
        void* value{};
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass)->get_Language(&value));
        return { value, take_ownership_from_abi };
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass<D>::AddImageQuery(Windows::Foundation::IReference<bool> const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass)->put_AddImageQuery(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass<D>::BaseUri(Windows::Foundation::Uri const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass)->put_BaseUri(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass<D>::BindingGeneric(Microsoft::Toolkit::Uwp::Notifications::ToastBindingGeneric const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass)->put_BindingGeneric(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass<D>::BindingShoulderTap(Microsoft::Toolkit::Uwp::Notifications::ToastBindingShoulderTap const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass)->put_BindingShoulderTap(*(void**)(&value)));
    }
    template <typename D> void consume_Microsoft_Toolkit_Uwp_Notifications_IToastVisualClass<D>::Language(param::hstring const& value) const
    {
        check_hresult(WINRT_SHIM(Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass)->put_Language(*(void**)(&value)));
    }
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveChild> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveChild>
    {
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveGroupClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveGroupClass>
    {
        int32_t WINRT_CALL get_Children(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroup>>(this->shim().Children());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass>
    {
        int32_t WINRT_CALL get_HintAlign(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageAlign>(this->shim().HintAlign());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintCrop(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageCrop>(this->shim().HintCrop());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintRemoveMargin(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<bool>>(this->shim().HintRemoveMargin());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintAlign(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintAlign(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageAlign const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintCrop(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintCrop(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::AdaptiveImageCrop const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintRemoveMargin(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintRemoveMargin(*reinterpret_cast<Windows::Foundation::IReference<bool> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL ToString(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ToString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass>
    {
        int32_t WINRT_CALL get_Bindings(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IMap<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarBindableProperty, hstring>>(this->shim().Bindings());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Status(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Title(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Title());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Value(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue>(this->shim().Value());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ValueStringOverride(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ValueStringOverride());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Status(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Status(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Title(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Title(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Value(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Value(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ValueStringOverride(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ValueStringOverride(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass>
    {
        int32_t WINRT_CALL get_IsIndeterminate(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsIndeterminate());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Value(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().Value());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_IsIndeterminate(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsIndeterminate(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Value(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Value(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic>
    {
        int32_t WINRT_CALL FromValue(double d, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue>(this->shim().FromValue(d));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Indeterminate(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue>(this->shim().Indeterminate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild>
    {
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass>
    {
        int32_t WINRT_CALL get_Children(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild>>(this->shim().Children());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintTextStacking(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroupTextStacking>(this->shim().HintTextStacking());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintWeight(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<int32_t>>(this->shim().HintWeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintTextStacking(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintTextStacking(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroupTextStacking const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintWeight(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintWeight(*reinterpret_cast<Windows::Foundation::IReference<int32_t> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass>
    {
        int32_t WINRT_CALL get_Bindings(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IMap<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextBindableProperty, hstring>>(this->shim().Bindings());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintAlign(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextAlign>(this->shim().HintAlign());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintMaxLines(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<int32_t>>(this->shim().HintMaxLines());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintMinLines(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<int32_t>>(this->shim().HintMinLines());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintStyle(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextStyle>(this->shim().HintStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintWrap(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<bool>>(this->shim().HintWrap());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Language(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Language());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Text(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Text());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintAlign(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintAlign(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextAlign const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintMaxLines(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintMaxLines(*reinterpret_cast<Windows::Foundation::IReference<int32_t> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintMinLines(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintMinLines(*reinterpret_cast<Windows::Foundation::IReference<int32_t> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintStyle(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintStyle(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::AdaptiveTextStyle const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintWrap(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintWrap(*reinterpret_cast<Windows::Foundation::IReference<bool> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Language(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Language(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Text(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Text(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL ToString(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ToString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass>
    {
        int32_t WINRT_CALL get_Glyph(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue>(this->shim().Glyph());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Glyph(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Glyph(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL ToString(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ToString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentFactory> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentFactory>
    {
        int32_t WINRT_CALL CreateBadgeGlyphContent(int32_t glyph, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphContent>(this->shim().CreateBadgeGlyphContent(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue const*>(&glyph)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass>
    {
        int32_t WINRT_CALL get_Number(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().Number());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Number(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Number(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL ToString(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ToString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentFactory> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentFactory>
    {
        int32_t WINRT_CALL CreateBadgeNumericContent(uint32_t number, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::BadgeNumericContent>(this->shim().CreateBadgeNumericContent(number));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IBaseImage> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IBaseImage>
    {
        int32_t WINRT_CALL get_Source(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Source(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_AlternateText(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().AlternateText());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_AlternateText(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AlternateText(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_AddImageQuery(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<bool>>(this->shim().AddImageQuery());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_AddImageQuery(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddImageQuery(*reinterpret_cast<Windows::Foundation::IReference<bool> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IBaseText> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IBaseText>
    {
        int32_t WINRT_CALL get_Text(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Text());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Text(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Text(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Language(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Language());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Language(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Language(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::INotificationContent> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::INotificationContent>
    {
        int32_t WINRT_CALL GetContent(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().GetContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetXml(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Data::Xml::Dom::XmlDocument>(this->shim().GetXml());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass>
    {
        int32_t WINRT_CALL get_HintCrop(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImageCrop>(this->shim().HintCrop());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintOverlay(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<int32_t>>(this->shim().HintOverlay());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintCrop(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintCrop(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImageCrop const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintOverlay(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintOverlay(*reinterpret_cast<Windows::Foundation::IReference<int32_t> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass>
    {
        int32_t WINRT_CALL get_Lang(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Lang());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Text(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Text());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Lang(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Lang(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Text(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Text(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL ToString(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ToString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass>
    {
        int32_t WINRT_CALL get_AddImageQuery(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<bool>>(this->shim().AddImageQuery());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Arguments(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Arguments());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_BaseUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Uri>(this->shim().BaseUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Branding(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileBranding>(this->shim().Branding());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Content(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ContentId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ContentId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_DisplayName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DisplayName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Language(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Language());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_AddImageQuery(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddImageQuery(*reinterpret_cast<Windows::Foundation::IReference<bool> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Arguments(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Arguments(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_BaseUri(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BaseUri(*reinterpret_cast<Windows::Foundation::Uri const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Branding(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Branding(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileBranding const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ContentId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Content(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Content(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_DisplayName(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisplayName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Language(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Language(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent>
    {
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild>
    {
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass>
    {
        int32_t WINRT_CALL get_BackgroundImage(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImage>(this->shim().BackgroundImage());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Children(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild>>(this->shim().Children());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_PeekImage(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TilePeekImage>(this->shim().PeekImage());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_TextStacking(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileTextStacking>(this->shim().TextStacking());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_BackgroundImage(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BackgroundImage(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImage const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_PeekImage(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PeekImage(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TilePeekImage const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_TextStacking(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextStacking(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileTextStacking const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass>
    {
        int32_t WINRT_CALL get_Image(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage>(this->shim().Image());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Text(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileBasicText>(this->shim().Text());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Image(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Image(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Text(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Text(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileBasicText const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass>
    {
        int32_t WINRT_CALL get_Icon(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage>(this->shim().Icon());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Icon(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Icon(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPeopleClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPeopleClass>
    {
        int32_t WINRT_CALL get_Images(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage>>(this->shim().Images());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPhotosClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPhotosClass>
    {
        int32_t WINRT_CALL get_Images(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::TileBasicImage>>(this->shim().Images());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileContentClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileContentClass>
    {
        int32_t WINRT_CALL get_Visual(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileVisual>(this->shim().Visual());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetContent(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().GetContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL GetXml(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Data::Xml::Dom::XmlDocument>(this->shim().GetXml());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Visual(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Visual(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileVisual const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass>
    {
        int32_t WINRT_CALL get_HintCrop(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TilePeekImageCrop>(this->shim().HintCrop());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintOverlay(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<int32_t>>(this->shim().HintOverlay());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintCrop(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintCrop(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TilePeekImageCrop const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintOverlay(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintOverlay(*reinterpret_cast<Windows::Foundation::IReference<int32_t> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass>
    {
        int32_t WINRT_CALL get_AddImageQuery(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<bool>>(this->shim().AddImageQuery());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Arguments(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Arguments());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_BaseUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Uri>(this->shim().BaseUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Branding(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileBranding>(this->shim().Branding());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ContentId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ContentId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_DisplayName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DisplayName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Language(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Language());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_LockDetailedStatus1(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LockDetailedStatus1());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_LockDetailedStatus2(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LockDetailedStatus2());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_LockDetailedStatus3(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LockDetailedStatus3());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_TileLarge(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileBinding>(this->shim().TileLarge());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_TileMedium(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileBinding>(this->shim().TileMedium());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_TileSmall(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileBinding>(this->shim().TileSmall());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_TileWide(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::TileBinding>(this->shim().TileWide());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_AddImageQuery(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddImageQuery(*reinterpret_cast<Windows::Foundation::IReference<bool> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Arguments(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Arguments(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_BaseUri(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BaseUri(*reinterpret_cast<Windows::Foundation::Uri const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Branding(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Branding(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileBranding const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ContentId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_DisplayName(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisplayName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Language(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Language(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_LockDetailedStatus1(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LockDetailedStatus1(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_LockDetailedStatus2(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LockDetailedStatus2(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_LockDetailedStatus3(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LockDetailedStatus3(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_TileLarge(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TileLarge(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileBinding const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_TileMedium(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TileMedium(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileBinding const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_TileSmall(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TileSmall(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileBinding const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_TileWide(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TileWide(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::TileBinding const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastActions> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastActions>
    {
        int32_t WINRT_CALL get_ContextMenuItems(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::ToastContextMenuItem>>(this->shim().ContextMenuItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass>
    {
        int32_t WINRT_CALL get_Buttons(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IToastButton>>(this->shim().Buttons());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Inputs(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IToastInput>>(this->shim().Inputs());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass>
    {
        int32_t WINRT_CALL get_AfterActivationBehavior(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastAfterActivationBehavior>(this->shim().AfterActivationBehavior());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ProtocolActivationTargetApplicationPfn(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ProtocolActivationTargetApplicationPfn());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_AfterActivationBehavior(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AfterActivationBehavior(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastAfterActivationBehavior const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ProtocolActivationTargetApplicationPfn(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ProtocolActivationTargetApplicationPfn(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass>
    {
        int32_t WINRT_CALL get_Loop(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Loop());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Silent(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Silent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Src(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Uri>(this->shim().Src());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Loop(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Loop(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Silent(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Silent(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Src(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Src(*reinterpret_cast<Windows::Foundation::Uri const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild>
    {
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass>
    {
        int32_t WINRT_CALL get_AddImageQuery(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<bool>>(this->shim().AddImageQuery());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_AppLogoOverride(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogo>(this->shim().AppLogoOverride());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Attribution(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAttributionText>(this->shim().Attribution());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_BaseUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Uri>(this->shim().BaseUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Children(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild>>(this->shim().Children());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HeroImage(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastGenericHeroImage>(this->shim().HeroImage());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Language(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Language());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_AddImageQuery(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddImageQuery(*reinterpret_cast<Windows::Foundation::IReference<bool> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_AppLogoOverride(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AppLogoOverride(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogo const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Attribution(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Attribution(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAttributionText const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_BaseUri(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BaseUri(*reinterpret_cast<Windows::Foundation::Uri const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HeroImage(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HeroImage(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastGenericHeroImage const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Language(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Language(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass>
    {
        int32_t WINRT_CALL get_AddImageQuery(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<bool>>(this->shim().AddImageQuery());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_BaseUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Uri>(this->shim().BaseUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Image(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastShoulderTapImage>(this->shim().Image());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Language(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Language());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_AddImageQuery(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddImageQuery(*reinterpret_cast<Windows::Foundation::IReference<bool> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_BaseUri(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BaseUri(*reinterpret_cast<Windows::Foundation::Uri const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Image(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Image(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastShoulderTapImage const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Language(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Language(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastButton> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastButton>
    {
        int32_t WINRT_CALL get_ImageUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ImageUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ImageUri(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ImageUri(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintActionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().HintActionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintActionId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintActionId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass>
    {
        int32_t WINRT_CALL get_ActivationOptions(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions>(this->shim().ActivationOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ActivationType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastActivationType>(this->shim().ActivationType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Arguments(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Arguments());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Content(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_TextBoxId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().TextBoxId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ActivationOptions(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ActivationOptions(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ActivationType(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ActivationType(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_TextBoxId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TextBoxId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissClass>
    {
        int32_t WINRT_CALL get_CustomContent(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CustomContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissFactory> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissFactory>
    {
        int32_t WINRT_CALL CreateToastButtonDismiss(void* customContent, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastButtonDismiss>(this->shim().CreateToastButtonDismiss(*reinterpret_cast<hstring const*>(&customContent)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonFactory> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonFactory>
    {
        int32_t WINRT_CALL CreateToastButton(void* content, void* arguments, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastButton>(this->shim().CreateToastButton(*reinterpret_cast<hstring const*>(&content), *reinterpret_cast<hstring const*>(&arguments)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass>
    {
        int32_t WINRT_CALL get_CustomContent(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CustomContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_SelectionBoxId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SelectionBoxId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_SelectionBoxId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SelectionBoxId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeFactory> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeFactory>
    {
        int32_t WINRT_CALL CreateToastButtonSnooze(void* customContent, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastButtonSnooze>(this->shim().CreateToastButtonSnooze(*reinterpret_cast<hstring const*>(&customContent)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastContentClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastContentClass>
    {
        int32_t WINRT_CALL get_Actions(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::IToastActions>(this->shim().Actions());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ActivationOptions(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions>(this->shim().ActivationOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ActivationType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastActivationType>(this->shim().ActivationType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_AdditionalProperties(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IMap<hstring, hstring>>(this->shim().AdditionalProperties());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Audio(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastAudio>(this->shim().Audio());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_DisplayTimestamp(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<Windows::Foundation::DateTime>>(this->shim().DisplayTimestamp());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Duration(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastDuration>(this->shim().Duration());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Header(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastHeader>(this->shim().Header());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintPeople(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastPeople>(this->shim().HintPeople());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintToastId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().HintToastId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Launch(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Launch());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Scenario(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastScenario>(this->shim().Scenario());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Visual(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastVisual>(this->shim().Visual());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Actions(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Actions(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::IToastActions const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ActivationOptions(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ActivationOptions(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ActivationType(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ActivationType(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Audio(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Audio(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastAudio const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_DisplayTimestamp(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DisplayTimestamp(*reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::DateTime> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Duration(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Duration(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastDuration const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Header(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Header(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastHeader const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintPeople(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintPeople(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastPeople const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintToastId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintToastId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Launch(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Launch(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Scenario(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Scenario(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastScenario const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Visual(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Visual(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastVisual const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass>
    {
        int32_t WINRT_CALL get_ActivationOptions(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions>(this->shim().ActivationOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ActivationType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastActivationType>(this->shim().ActivationType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Arguments(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Arguments());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Content(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_HintActionId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().HintActionId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ActivationOptions(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ActivationOptions(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ActivationType(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ActivationType(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintActionId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintActionId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemFactory> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemFactory>
    {
        int32_t WINRT_CALL CreateToastContextMenuItem(void* content, void* arguments, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastContextMenuItem>(this->shim().CreateToastContextMenuItem(*reinterpret_cast<hstring const*>(&content), *reinterpret_cast<hstring const*>(&arguments)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass>
    {
        int32_t WINRT_CALL get_HintCrop(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogoCrop>(this->shim().HintCrop());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_HintCrop(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().HintCrop(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogoCrop const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass>
    {
        int32_t WINRT_CALL get_ActivationOptions(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions>(this->shim().ActivationOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_ActivationType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastActivationType>(this->shim().ActivationType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Arguments(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Arguments());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Title(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Title());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ActivationOptions(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ActivationOptions(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_ActivationType(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ActivationType(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastActivationType const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Arguments(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Arguments(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Id(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Id(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Title(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Title(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastHeaderFactory> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastHeaderFactory>
    {
        int32_t WINRT_CALL CreateToastHeader(void* id, void* title, void* arguments, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastHeader>(this->shim().CreateToastHeader(*reinterpret_cast<hstring const*>(&id), *reinterpret_cast<hstring const*>(&title), *reinterpret_cast<hstring const*>(&arguments)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastInput> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastInput>
    {
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass>
    {
        int32_t WINRT_CALL get_EmailAddress(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().EmailAddress());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_PhoneNumber(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().PhoneNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_RemoteId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().RemoteId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_EmailAddress(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EmailAddress(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_PhoneNumber(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PhoneNumber(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_RemoteId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoteId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass>
    {
        int32_t WINRT_CALL get_DefaultSelectionBoxItemId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DefaultSelectionBoxItemId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Items(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBoxItem>>(this->shim().Items());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Title(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Title());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_DefaultSelectionBoxItemId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultSelectionBoxItemId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Title(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Title(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxFactory> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxFactory>
    {
        int32_t WINRT_CALL CreateToastSelectionBox(void* id, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBox>(this->shim().CreateToastSelectionBox(*reinterpret_cast<hstring const*>(&id)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass>
    {
        int32_t WINRT_CALL get_Content(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemFactory> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemFactory>
    {
        int32_t WINRT_CALL CreateToastSelectionBoxItem(void* id, void* content, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBoxItem>(this->shim().CreateToastSelectionBoxItem(*reinterpret_cast<hstring const*>(&id), *reinterpret_cast<hstring const*>(&content)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass>
    {
        int32_t WINRT_CALL get_SpriteSheet(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastSpriteSheet>(this->shim().SpriteSheet());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_SpriteSheet(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SpriteSheet(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastSpriteSheet const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass>
    {
        int32_t WINRT_CALL get_Fps(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<uint32_t>>(this->shim().Fps());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_FrameHeight(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<uint32_t>>(this->shim().FrameHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Source(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_StartingFrame(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<uint32_t>>(this->shim().StartingFrame());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Fps(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Fps(*reinterpret_cast<Windows::Foundation::IReference<uint32_t> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_FrameHeight(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FrameHeight(*reinterpret_cast<Windows::Foundation::IReference<uint32_t> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Source(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Source(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_StartingFrame(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StartingFrame(*reinterpret_cast<Windows::Foundation::IReference<uint32_t> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass>
    {
        int32_t WINRT_CALL get_DefaultInput(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DefaultInput());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_PlaceholderContent(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().PlaceholderContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Title(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Title());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_DefaultInput(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultInput(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_PlaceholderContent(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PlaceholderContent(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Title(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Title(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxFactory> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxFactory>
    {
        int32_t WINRT_CALL CreateToastTextBox(void* id, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastTextBox>(this->shim().CreateToastTextBox(*reinterpret_cast<hstring const*>(&id)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass> : produce_base<D, Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass>
    {
        int32_t WINRT_CALL get_AddImageQuery(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::IReference<bool>>(this->shim().AddImageQuery());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_BaseUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Windows::Foundation::Uri>(this->shim().BaseUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_BindingGeneric(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastBindingGeneric>(this->shim().BindingGeneric());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_BindingShoulderTap(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<Microsoft::Toolkit::Uwp::Notifications::ToastBindingShoulderTap>(this->shim().BindingShoulderTap());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL get_Language(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Language());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_AddImageQuery(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddImageQuery(*reinterpret_cast<Windows::Foundation::IReference<bool> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_BaseUri(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BaseUri(*reinterpret_cast<Windows::Foundation::Uri const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_BindingGeneric(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BindingGeneric(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastBindingGeneric const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_BindingShoulderTap(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BindingShoulderTap(*reinterpret_cast<Microsoft::Toolkit::Uwp::Notifications::ToastBindingShoulderTap const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t WINRT_CALL put_Language(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Language(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
namespace winrt::Microsoft::Toolkit::Uwp::Notifications
{
    inline AdaptiveGroup::AdaptiveGroup() :
        AdaptiveGroup(impl::call_factory<AdaptiveGroup>([](auto&& f) { return f.template ActivateInstance<AdaptiveGroup>(); }))
    {
    }
    inline AdaptiveImage::AdaptiveImage() :
        AdaptiveImage(impl::call_factory<AdaptiveImage>([](auto&& f) { return f.template ActivateInstance<AdaptiveImage>(); }))
    {
    }
    inline AdaptiveProgressBar::AdaptiveProgressBar() :
        AdaptiveProgressBar(impl::call_factory<AdaptiveProgressBar>([](auto&& f) { return f.template ActivateInstance<AdaptiveProgressBar>(); }))
    {
    }
    inline Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue AdaptiveProgressBarValue::FromValue(double d)
    {
        return impl::call_factory<AdaptiveProgressBarValue, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic>([&](auto&& f) { return f.FromValue(d); });
    }
    inline Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue AdaptiveProgressBarValue::Indeterminate()
    {
        return impl::call_factory<AdaptiveProgressBarValue, Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic>([&](auto&& f) { return f.Indeterminate(); });
    }
    inline AdaptiveSubgroup::AdaptiveSubgroup() :
        AdaptiveSubgroup(impl::call_factory<AdaptiveSubgroup>([](auto&& f) { return f.template ActivateInstance<AdaptiveSubgroup>(); }))
    {
    }
    inline AdaptiveText::AdaptiveText() :
        AdaptiveText(impl::call_factory<AdaptiveText>([](auto&& f) { return f.template ActivateInstance<AdaptiveText>(); }))
    {
    }
    inline BadgeGlyphContent::BadgeGlyphContent() :
        BadgeGlyphContent(impl::call_factory<BadgeGlyphContent>([](auto&& f) { return f.template ActivateInstance<BadgeGlyphContent>(); }))
    {
    }
    inline BadgeGlyphContent::BadgeGlyphContent(Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphValue const& glyph) :
        BadgeGlyphContent(impl::call_factory<BadgeGlyphContent, Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentFactory>([&](auto&& f) { return f.CreateBadgeGlyphContent(glyph); }))
    {
    }
    inline BadgeNumericContent::BadgeNumericContent() :
        BadgeNumericContent(impl::call_factory<BadgeNumericContent>([](auto&& f) { return f.template ActivateInstance<BadgeNumericContent>(); }))
    {
    }
    inline BadgeNumericContent::BadgeNumericContent(uint32_t number) :
        BadgeNumericContent(impl::call_factory<BadgeNumericContent, Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentFactory>([&](auto&& f) { return f.CreateBadgeNumericContent(number); }))
    {
    }
    inline TileBackgroundImage::TileBackgroundImage() :
        TileBackgroundImage(impl::call_factory<TileBackgroundImage>([](auto&& f) { return f.template ActivateInstance<TileBackgroundImage>(); }))
    {
    }
    inline TileBasicImage::TileBasicImage() :
        TileBasicImage(impl::call_factory<TileBasicImage>([](auto&& f) { return f.template ActivateInstance<TileBasicImage>(); }))
    {
    }
    inline TileBasicText::TileBasicText() :
        TileBasicText(impl::call_factory<TileBasicText>([](auto&& f) { return f.template ActivateInstance<TileBasicText>(); }))
    {
    }
    inline TileBinding::TileBinding() :
        TileBinding(impl::call_factory<TileBinding>([](auto&& f) { return f.template ActivateInstance<TileBinding>(); }))
    {
    }
    inline TileBindingContentAdaptive::TileBindingContentAdaptive() :
        TileBindingContentAdaptive(impl::call_factory<TileBindingContentAdaptive>([](auto&& f) { return f.template ActivateInstance<TileBindingContentAdaptive>(); }))
    {
    }
    inline TileBindingContentContact::TileBindingContentContact() :
        TileBindingContentContact(impl::call_factory<TileBindingContentContact>([](auto&& f) { return f.template ActivateInstance<TileBindingContentContact>(); }))
    {
    }
    inline TileBindingContentIconic::TileBindingContentIconic() :
        TileBindingContentIconic(impl::call_factory<TileBindingContentIconic>([](auto&& f) { return f.template ActivateInstance<TileBindingContentIconic>(); }))
    {
    }
    inline TileBindingContentPeople::TileBindingContentPeople() :
        TileBindingContentPeople(impl::call_factory<TileBindingContentPeople>([](auto&& f) { return f.template ActivateInstance<TileBindingContentPeople>(); }))
    {
    }
    inline TileBindingContentPhotos::TileBindingContentPhotos() :
        TileBindingContentPhotos(impl::call_factory<TileBindingContentPhotos>([](auto&& f) { return f.template ActivateInstance<TileBindingContentPhotos>(); }))
    {
    }
    inline TileContent::TileContent() :
        TileContent(impl::call_factory<TileContent>([](auto&& f) { return f.template ActivateInstance<TileContent>(); }))
    {
    }
    inline TilePeekImage::TilePeekImage() :
        TilePeekImage(impl::call_factory<TilePeekImage>([](auto&& f) { return f.template ActivateInstance<TilePeekImage>(); }))
    {
    }
    inline TileVisual::TileVisual() :
        TileVisual(impl::call_factory<TileVisual>([](auto&& f) { return f.template ActivateInstance<TileVisual>(); }))
    {
    }
    inline ToastActionsCustom::ToastActionsCustom() :
        ToastActionsCustom(impl::call_factory<ToastActionsCustom>([](auto&& f) { return f.template ActivateInstance<ToastActionsCustom>(); }))
    {
    }
    inline ToastActionsSnoozeAndDismiss::ToastActionsSnoozeAndDismiss() :
        ToastActionsSnoozeAndDismiss(impl::call_factory<ToastActionsSnoozeAndDismiss>([](auto&& f) { return f.template ActivateInstance<ToastActionsSnoozeAndDismiss>(); }))
    {
    }
    inline ToastActivationOptions::ToastActivationOptions() :
        ToastActivationOptions(impl::call_factory<ToastActivationOptions>([](auto&& f) { return f.template ActivateInstance<ToastActivationOptions>(); }))
    {
    }
    inline ToastAudio::ToastAudio() :
        ToastAudio(impl::call_factory<ToastAudio>([](auto&& f) { return f.template ActivateInstance<ToastAudio>(); }))
    {
    }
    inline ToastBindingGeneric::ToastBindingGeneric() :
        ToastBindingGeneric(impl::call_factory<ToastBindingGeneric>([](auto&& f) { return f.template ActivateInstance<ToastBindingGeneric>(); }))
    {
    }
    inline ToastBindingShoulderTap::ToastBindingShoulderTap() :
        ToastBindingShoulderTap(impl::call_factory<ToastBindingShoulderTap>([](auto&& f) { return f.template ActivateInstance<ToastBindingShoulderTap>(); }))
    {
    }
    inline ToastButton::ToastButton(param::hstring const& content, param::hstring const& arguments) :
        ToastButton(impl::call_factory<ToastButton, Microsoft::Toolkit::Uwp::Notifications::IToastButtonFactory>([&](auto&& f) { return f.CreateToastButton(content, arguments); }))
    {
    }
    inline ToastButtonDismiss::ToastButtonDismiss() :
        ToastButtonDismiss(impl::call_factory<ToastButtonDismiss>([](auto&& f) { return f.template ActivateInstance<ToastButtonDismiss>(); }))
    {
    }
    inline ToastButtonDismiss::ToastButtonDismiss(param::hstring const& customContent) :
        ToastButtonDismiss(impl::call_factory<ToastButtonDismiss, Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissFactory>([&](auto&& f) { return f.CreateToastButtonDismiss(customContent); }))
    {
    }
    inline ToastButtonSnooze::ToastButtonSnooze() :
        ToastButtonSnooze(impl::call_factory<ToastButtonSnooze>([](auto&& f) { return f.template ActivateInstance<ToastButtonSnooze>(); }))
    {
    }
    inline ToastButtonSnooze::ToastButtonSnooze(param::hstring const& customContent) :
        ToastButtonSnooze(impl::call_factory<ToastButtonSnooze, Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeFactory>([&](auto&& f) { return f.CreateToastButtonSnooze(customContent); }))
    {
    }
    inline ToastContent::ToastContent() :
        ToastContent(impl::call_factory<ToastContent>([](auto&& f) { return f.template ActivateInstance<ToastContent>(); }))
    {
    }
    inline ToastContextMenuItem::ToastContextMenuItem(param::hstring const& content, param::hstring const& arguments) :
        ToastContextMenuItem(impl::call_factory<ToastContextMenuItem, Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemFactory>([&](auto&& f) { return f.CreateToastContextMenuItem(content, arguments); }))
    {
    }
    inline ToastGenericAppLogo::ToastGenericAppLogo() :
        ToastGenericAppLogo(impl::call_factory<ToastGenericAppLogo>([](auto&& f) { return f.template ActivateInstance<ToastGenericAppLogo>(); }))
    {
    }
    inline ToastGenericAttributionText::ToastGenericAttributionText() :
        ToastGenericAttributionText(impl::call_factory<ToastGenericAttributionText>([](auto&& f) { return f.template ActivateInstance<ToastGenericAttributionText>(); }))
    {
    }
    inline ToastGenericHeroImage::ToastGenericHeroImage() :
        ToastGenericHeroImage(impl::call_factory<ToastGenericHeroImage>([](auto&& f) { return f.template ActivateInstance<ToastGenericHeroImage>(); }))
    {
    }
    inline ToastHeader::ToastHeader(param::hstring const& id, param::hstring const& title, param::hstring const& arguments) :
        ToastHeader(impl::call_factory<ToastHeader, Microsoft::Toolkit::Uwp::Notifications::IToastHeaderFactory>([&](auto&& f) { return f.CreateToastHeader(id, title, arguments); }))
    {
    }
    inline ToastPeople::ToastPeople() :
        ToastPeople(impl::call_factory<ToastPeople>([](auto&& f) { return f.template ActivateInstance<ToastPeople>(); }))
    {
    }
    inline ToastSelectionBox::ToastSelectionBox(param::hstring const& id) :
        ToastSelectionBox(impl::call_factory<ToastSelectionBox, Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxFactory>([&](auto&& f) { return f.CreateToastSelectionBox(id); }))
    {
    }
    inline ToastSelectionBoxItem::ToastSelectionBoxItem(param::hstring const& id, param::hstring const& content) :
        ToastSelectionBoxItem(impl::call_factory<ToastSelectionBoxItem, Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemFactory>([&](auto&& f) { return f.CreateToastSelectionBoxItem(id, content); }))
    {
    }
    inline ToastShoulderTapImage::ToastShoulderTapImage() :
        ToastShoulderTapImage(impl::call_factory<ToastShoulderTapImage>([](auto&& f) { return f.template ActivateInstance<ToastShoulderTapImage>(); }))
    {
    }
    inline ToastSpriteSheet::ToastSpriteSheet() :
        ToastSpriteSheet(impl::call_factory<ToastSpriteSheet>([](auto&& f) { return f.template ActivateInstance<ToastSpriteSheet>(); }))
    {
    }
    inline ToastTextBox::ToastTextBox(param::hstring const& id) :
        ToastTextBox(impl::call_factory<ToastTextBox, Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxFactory>([&](auto&& f) { return f.CreateToastTextBox(id); }))
    {
    }
    inline ToastVisual::ToastVisual() :
        ToastVisual(impl::call_factory<ToastVisual>([](auto&& f) { return f.template ActivateInstance<ToastVisual>(); }))
    {
    }
}
namespace std
{
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveChild> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveChild> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveGroupClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveGroupClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveImageClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveProgressBarValueStatic> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupChild> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveSubgroupClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IAdaptiveTextClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentFactory> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IBadgeGlyphContentFactory> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentFactory> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IBadgeNumericContentFactory> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IBaseImage> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IBaseImage> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IBaseText> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IBaseText> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::INotificationContent> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::INotificationContent> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBackgroundImageClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBasicTextClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContent> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveChild> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentAdaptiveClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentContactClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentIconicClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPeopleClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPeopleClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPhotosClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileBindingContentPhotosClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileContentClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileContentClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITilePeekImageClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ITileVisualClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastActions> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastActions> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastActionsCustomClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastActivationOptionsClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastAudioClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericChild> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastBindingGenericClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastBindingShoulderTapClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButton> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButton> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissFactory> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonDismissFactory> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonFactory> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonFactory> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeFactory> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastButtonSnoozeFactory> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastContentClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastContentClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemFactory> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastContextMenuItemFactory> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastGenericAppLogoClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastHeaderClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastHeaderFactory> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastHeaderFactory> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastInput> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastInput> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastPeopleClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxFactory> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxFactory> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemFactory> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastSelectionBoxItemFactory> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastShoulderTapImageClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastSpriteSheetClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxFactory> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastTextBoxFactory> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::IToastVisualClass> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveGroup> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveGroup> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveImage> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveImage> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBar> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBar> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveProgressBarValue> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroup> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveSubgroup> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveText> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::AdaptiveText> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphContent> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::BadgeGlyphContent> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::BadgeNumericContent> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::BadgeNumericContent> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImage> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBackgroundImage> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBasicImage> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBasicImage> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBasicText> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBasicText> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBinding> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBinding> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBindingContentAdaptive> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBindingContentAdaptive> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBindingContentContact> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBindingContentContact> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBindingContentIconic> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBindingContentIconic> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBindingContentPeople> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBindingContentPeople> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBindingContentPhotos> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TileBindingContentPhotos> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TileContent> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TileContent> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TilePeekImage> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TilePeekImage> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::TileVisual> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::TileVisual> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastActionsCustom> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastActionsCustom> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastActionsSnoozeAndDismiss> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastActionsSnoozeAndDismiss> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastActivationOptions> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastAudio> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastAudio> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastBindingGeneric> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastBindingGeneric> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastBindingShoulderTap> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastBindingShoulderTap> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastButton> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastButton> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastButtonDismiss> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastButtonDismiss> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastButtonSnooze> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastButtonSnooze> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastContent> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastContent> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastContextMenuItem> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastContextMenuItem> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogo> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastGenericAppLogo> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastGenericAttributionText> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastGenericAttributionText> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastGenericHeroImage> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastGenericHeroImage> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastHeader> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastHeader> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastPeople> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastPeople> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBox> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBox> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBoxItem> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastSelectionBoxItem> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastShoulderTapImage> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastShoulderTapImage> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastSpriteSheet> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastSpriteSheet> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastTextBox> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastTextBox> {};
    template<> struct hash<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastVisual> : winrt::impl::hash_base<winrt::Microsoft::Toolkit::Uwp::Notifications::ToastVisual> {};
}
#endif
